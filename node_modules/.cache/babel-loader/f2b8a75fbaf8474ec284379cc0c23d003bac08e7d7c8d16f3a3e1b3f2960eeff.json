{"ast":null,"code":"import { ref, computed } from 'vue';\nimport axios from 'axios';\nconst API_URL = 'http://localhost:3000/api';\nexport default {\n  __name: 'QuizComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const questions = ref([]);\n    const currentQuestionIndex = ref(0);\n    const answers = ref({});\n    const userEmail = ref('');\n    const emailError = ref(false);\n    const isLoading = ref(true);\n\n    // Fetch questions from DB\n    const loadQuestions = async () => {\n      try {\n        const response = await axios.get(`${API_URL}/questions`);\n        questions.value = response.data;\n        isLoading.value = false;\n      } catch (error) {\n        console.error('Error loading questions:', error);\n        isLoading.value = false;\n      }\n    };\n    const currentQuestion = computed(() => questions.value[currentQuestionIndex.value]);\n    const isCompleted = computed(() => currentQuestionIndex.value >= questions.value.length);\n    const progress = computed(() => currentQuestionIndex.value / questions.value.length * 100);\n    const isValidEmail = computed(() => {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailRegex.test(userEmail.value);\n    });\n    const answerQuestion = answer => {\n      if (currentQuestion.value) {\n        answers.value[currentQuestion.value._id] = answer;\n        currentQuestionIndex.value++;\n      }\n    };\n    const generatePDF = async () => {\n      // ... codul existent pentru PDF\n      // Actualizat pentru a folosi _id din MongoDB\n      questions.value.forEach((question, index) => {\n        const answer = answers.value[question._id];\n        // ... restul logicii PDF\n      });\n    };\n    const submitResults = async () => {\n      if (!isValidEmail.value) {\n        emailError.value = true;\n        return;\n      }\n      try {\n        const pdfBlob = await generatePDF();\n        const formData = new FormData();\n        formData.append('pdf', pdfBlob, 'rezultate.pdf');\n        formData.append('email', userEmail.value);\n        await axios.post(`${API_URL}/send-results`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        alert('Rezultatele au fost trimise pe email!');\n      } catch (error) {\n        console.error('Error:', error);\n        alert('A apărut o eroare. Te rugăm să încerci din nou.');\n      }\n    };\n\n    // Load questions when component is mounted\n    loadQuestions();\n    const __returned__ = {\n      API_URL,\n      questions,\n      currentQuestionIndex,\n      answers,\n      userEmail,\n      emailError,\n      isLoading,\n      loadQuestions,\n      currentQuestion,\n      isCompleted,\n      progress,\n      isValidEmail,\n      answerQuestion,\n      generatePDF,\n      submitResults,\n      ref,\n      computed,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","axios","API_URL","questions","currentQuestionIndex","answers","userEmail","emailError","isLoading","loadQuestions","response","get","value","data","error","console","currentQuestion","isCompleted","length","progress","isValidEmail","emailRegex","test","answerQuestion","answer","_id","generatePDF","forEach","question","index","submitResults","pdfBlob","formData","FormData","append","post","headers","alert"],"sources":["D:/Projects/Barmayoun/vue-questions/quizz-app-v2/src/components/QuizComponent.vue"],"sourcesContent":["<script setup>\r\nimport { ref, computed } from 'vue'\r\nimport axios from 'axios'\r\n\r\nconst API_URL = 'http://localhost:3000/api'\r\n\r\nconst questions = ref([])\r\nconst currentQuestionIndex = ref(0)\r\nconst answers = ref({})\r\nconst userEmail = ref('')\r\nconst emailError = ref(false)\r\nconst isLoading = ref(true)\r\n\r\n// Fetch questions from DB\r\nconst loadQuestions = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/questions`)\r\n    questions.value = response.data\r\n    isLoading.value = false\r\n  } catch (error) {\r\n    console.error('Error loading questions:', error)\r\n    isLoading.value = false\r\n  }\r\n}\r\n\r\nconst currentQuestion = computed(() =>\r\n  questions.value[currentQuestionIndex.value]\r\n)\r\n\r\nconst isCompleted = computed(() =>\r\n  currentQuestionIndex.value >= questions.value.length\r\n)\r\n\r\nconst progress = computed(() =>\r\n  (currentQuestionIndex.value / questions.value.length) * 100\r\n)\r\n\r\nconst isValidEmail = computed(() => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n  return emailRegex.test(userEmail.value)\r\n})\r\n\r\nconst answerQuestion = (answer) => {\r\n  if (currentQuestion.value) {\r\n    answers.value[currentQuestion.value._id] = answer\r\n    currentQuestionIndex.value++\r\n  }\r\n}\r\n\r\nconst generatePDF = async () => {\r\n  // ... codul existent pentru PDF\r\n  // Actualizat pentru a folosi _id din MongoDB\r\n  questions.value.forEach((question, index) => {\r\n    const answer = answers.value[question._id]\r\n    // ... restul logicii PDF\r\n  })\r\n}\r\n\r\nconst submitResults = async () => {\r\n  if (!isValidEmail.value) {\r\n    emailError.value = true\r\n    return\r\n  }\r\n\r\n  try {\r\n    const pdfBlob = await generatePDF()\r\n    const formData = new FormData()\r\n    formData.append('pdf', pdfBlob, 'rezultate.pdf')\r\n    formData.append('email', userEmail.value)\r\n\r\n    await axios.post(`${API_URL}/send-results`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    })\r\n\r\n    alert('Rezultatele au fost trimise pe email!')\r\n  } catch (error) {\r\n    console.error('Error:', error)\r\n    alert('A apărut o eroare. Te rugăm să încerci din nou.')\r\n  }\r\n}\r\n\r\n// Load questions when component is mounted\r\nloadQuestions()\r\n</script>\r\n\r\n<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-12 px-4\">\r\n    <div class=\"max-w-2xl mx-auto\">\r\n      <!-- Loading state -->\r\n      <div v-if=\"isLoading\" class=\"text-center py-12\">\r\n        <div class=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\r\n        <p class=\"mt-4 text-gray-600\">Se încarcă întrebările...</p>\r\n      </div>\r\n\r\n      <!-- Quiz content -->\r\n      <div v-else-if=\"!isCompleted && questions.length > 0\"\r\n        class=\"bg-white/70 backdrop-blur-lg rounded-2xl p-8 shadow-lg border border-gray-100\">\r\n        <div class=\"space-y-6\">\r\n          <!-- Progress -->\r\n          <div class=\"flex items-center justify-between mb-6\">\r\n            <span class=\"text-sm font-medium text-gray-500\">\r\n              Progres\r\n            </span>\r\n            <span class=\"text-sm font-medium text-gray-500\">\r\n              {{ currentQuestionIndex + 1 }}/{{ questions.length }}\r\n            </span>\r\n          </div>\r\n\r\n          <div class=\"w-full bg-gray-200 rounded-full h-2 mb-8\">\r\n            <div class=\"bg-primary h-2 rounded-full transition-all duration-300\" :style=\"{ width: `${progress}%` }\">\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Question -->\r\n          <h2 class=\"text-2xl font-medium text-gray-800 mb-8\">\r\n            {{ currentQuestion.text }}\r\n          </h2>\r\n\r\n          <!-- Answer buttons -->\r\n          <div class=\"flex gap-4 justify-center\">\r\n            <button @click=\"answerQuestion(true)\"\r\n              class=\"flex-1 py-3 px-6 bg-primary hover:bg-primary/90 text-gray-800 rounded-xl shadow-md hover:shadow-lg transition-all duration-200\">\r\n              Da\r\n            </button>\r\n            <button @click=\"answerQuestion(false)\"\r\n              class=\"flex-1 py-3 px-6 bg-white hover:bg-gray-50 text-gray-800 border border-gray-200 rounded-xl shadow-sm hover:shadow-md transition-all duration-200\">\r\n              Nu\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- No questions state -->\r\n      <div v-else-if=\"!isLoading && questions.length === 0\" class=\"text-center py-12\">\r\n        <p class=\"text-gray-600\">Nu există întrebări disponibile momentan.</p>\r\n      </div>\r\n\r\n      <!-- Completion state -->\r\n      <div v-else class=\"bg-white/70 backdrop-blur-lg rounded-2xl p-8 shadow-lg border border-gray-100\">\r\n        <div class=\"text-center space-y-6\">\r\n          <div class=\"mb-8\">\r\n            <div class=\"inline-flex items-center justify-center w-16 h-16 bg-primary/20 rounded-full mb-4\">\r\n              <svg class=\"w-8 h-8 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\r\n              </svg>\r\n            </div>\r\n            <h2 class=\"text-2xl font-semibold text-gray-800 mb-2\">\r\n              Felicitări! Ai finalizat evaluarea\r\n            </h2>\r\n            <p class=\"text-gray-600\">\r\n              Introdu adresa ta de email pentru a primi raportul personalizat.\r\n            </p>\r\n          </div>\r\n\r\n          <div class=\"max-w-md mx-auto\">\r\n            <input type=\"email\" v-model=\"userEmail\" placeholder=\"email@example.com\"\r\n              class=\"w-full px-4 py-3 rounded-xl border border-gray-200 mb-4 focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none\"\r\n              :class=\"{ 'border-red-300': emailError }\">\r\n            <button @click=\"submitResults\"\r\n              class=\"w-full py-3 px-6 bg-primary hover:bg-primary/90 text-gray-800 rounded-xl shadow-md hover:shadow-lg transition-all duration-200 disabled:opacity-50\"\r\n              :disabled=\"!isValidEmail\">\r\n              Trimite Rezultatele\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}