This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-28T16:07:58.286Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.browserslistrc
.eslintrc.js
.gitignore
.netlify/state.json
babel.config.js
jsconfig.json
netlify.toml
package.json
postcss.config.js
public/index.html
README.md
server/server.js
src/App.vue
src/assets/main.css
src/components/ActivityItem.vue
src/components/AuthButton.vue
src/components/BaseModal.vue
src/components/HelloWorld.vue
src/components/NavBar.vue
src/components/QuizComponent.vue
src/components/StatsCard.vue
src/main.js
src/router/index.js
src/store/index.js
src/stores/questions.js
src/stores/theme.js
src/views/AboutView.vue
src/views/DashboardView.vue
src/views/EditQuizView.vue
src/views/HomeView.vue
src/views/MyQuizzesView.vue
src/views/ProfileView.vue
src/views/QuestionBankView.vue
src/views/QuestionsView.vue
src/views/QuizPage.vue
tailwind.config.js
vue.config.js

================================================================
Repository Files
================================================================

================
File: .browserslistrc
================
> 1%
last 2 versions
not dead
not ie 11

================
File: .eslintrc.js
================
module.exports = {
  root: true,
  env: {
    node: true,
  },
  extends: ["plugin:vue/vue3-essential", "eslint:recommended"],
  parserOptions: {
    ecmaVersion: 2020,
  },
  rules: {
    "no-console": process.env.NODE_ENV === "production" ? "warn" : "off",
    "no-debugger": process.env.NODE_ENV === "production" ? "warn" : "off",
    "vue/multi-word-component-names": [
      "error",
      {
        ignores: ["Login", "Register", "Home"],
      },
    ],
  },
};

================
File: .gitignore
================
# Dependencies
/node_modules
/.pnp
.pnp.js

# Production build
/dist
/build

# Environment variables
.env
.env.local
.env.*.local
.env.development
.env.test
.env.production

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
logs
*.log

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Testing
/coverage

# Optional: local dev certificates
*.pem
*.cert
*.key

# Optional: local databases
*.sqlite
*.sqlite3

# Vue specific
.nuxt
.nitro
.cache
.output
.env
dist
dist-ssr

# Debug files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

================
File: .netlify/state.json
================
{
	"siteId": "d9103e0c-7b34-4ee8-a85c-3b2fc28ae0fe"
}

================
File: babel.config.js
================
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "baseUrl": "./",
    "moduleResolution": "node",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  }
}

================
File: netlify.toml
================
[build]
  command = "npm run build"
  publish = "dist"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

================
File: package.json
================
{
  "name": "quizz-app-v2",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "@auth0/auth0-vue": "^2.3.3",
    "@headlessui/vue": "^1.7.23",
    "@sendgrid/mail": "^8.1.4",
    "axios": "^1.7.7",
    "bcrypt": "^5.1.1",
    "core-js": "^3.8.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "express-oauth2-jwt-bearer": "^1.6.0",
    "jsonwebtoken": "^9.0.2",
    "jspdf": "^2.5.2",
    "mongoose": "^8.7.2",
    "multer": "^1.4.5-lts.1",
    "nodemailer": "^6.9.15",
    "pdfmake": "^0.2.14",
    "pinia": "^2.2.4",
    "vue": "^3.2.13",
    "vue-router": "^4.0.3",
    "vuedraggable": "^4.1.0",
    "vuex": "^4.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-plugin-router": "~5.0.0",
    "@vue/cli-plugin-vuex": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3",
    "postcss": "^8.4.47",
    "sass": "^1.32.7",
    "sass-loader": "^12.0.0",
    "tailwindcss": "^3.4.14"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

================
File: README.md
================
# quizz-app-v2

## Project setup
```
npm install
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```

### Lints and fixes files
```
npm run lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

================
File: server/server.js
================
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");
const { auth } = require("express-oauth2-jwt-bearer");
const sgMail = require("@sendgrid/mail");
const { jsPDF } = require("jspdf");
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

const app = express();

// Middleware pentru parsing
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors());

// Middleware pentru logging
app.use((req, res, next) => {
  console.log("Request received:", {
    method: req.method,
    path: req.path,
    headers: req.headers,
    body: req.body,
  });
  next();
});

app.use(
  cors({
    origin: ["http://localhost:8080", "http://localhost:3000"],
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
  })
);

// MongoDB Connection
mongoose
  .connect(process.env.MONGODB_URI)
  .then(() => console.log("Connected to MongoDB"))
  .catch((error) => console.error("MongoDB connection error:", error));

// Auth0 Middleware Configuration
const checkJwt = auth({
  issuerBaseURL: `https://${process.env.AUTH0_DOMAIN}`,
  audience: process.env.AUTH0_AUDIENCE,
});

// Schema-uri
const userSchema = new mongoose.Schema({
  auth0Id: {
    type: String,
    required: true,
    unique: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  name: String,
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

const User = mongoose.model("User", userSchema);

const questionSchema = new mongoose.Schema({
  text: {
    type: String,
    required: true,
    trim: true,
  },
  feedbackYes: {
    type: String,
    required: true,
    trim: true,
  },
  feedbackNo: {
    type: String,
    required: true,
    trim: true,
  },
  createdBy: {
    type: String,
    required: true,
  },
  // Noi c√¢mpuri
  usedInQuizzes: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Quiz",
    },
  ],
  category: {
    type: String,
    trim: true,
  },
  tags: [
    {
      type: String,
      trim: true,
    },
  ],
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

const Question = mongoose.model("Question", questionSchema);

const quizSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
    trim: true,
  },
  description: {
    type: String,
    trim: true,
  },
  createdBy: {
    type: String, // auth0Id
    required: true,
  },
  isPublished: {
    type: Boolean,
    default: false,
  },
  questions: [
    {
      question: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Question",
      },
      order: Number,
    },
  ],
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

const Quiz = mongoose.model("Quiz", quizSchema);

const activitySchema = new mongoose.Schema({
  type: {
    type: String,
    enum: ["quiz-created", "quiz-completed", "question-added"],
    required: true,
  },
  userId: {
    type: String,
    required: true,
  },
  title: {
    type: String,
    required: true,
  },
  details: mongoose.Schema.Types.Mixed,
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

const Activity = mongoose.model("Activity", activitySchema);

const quizCompletionSchema = new mongoose.Schema({
  quizId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Quiz",
    required: true,
  },
  email: {
    type: String,
    required: true,
  },
  answers: {
    type: Map,
    of: Boolean,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

const QuizCompletion = mongoose.model("QuizCompletion", quizCompletionSchema);

const quizViewSchema = new mongoose.Schema({
  quizId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Quiz",
    required: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

const QuizView = mongoose.model("QuizView", quizViewSchema);

const profileSchema = new mongoose.Schema({
  auth0Id: {
    type: String,
    required: true,
    unique: true,
  },
  name: {
    type: String,
    required: true,
  },
  emailPreferences: {
    quizCompleted: {
      type: Boolean,
      default: true,
    },
    weeklyStats: {
      type: Boolean,
      default: false,
    },
  },
  theme: {
    type: String,
    enum: ["light", "dark", "system"],
    default: "system",
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

const Profile = mongoose.model("Profile", profileSchema);

// Middleware pentru a ob»õine/crea user-ul din MongoDB bazat pe Auth0 ID
const getUserMiddleware = async (req, res, next) => {
  try {
    const auth0Id = req.auth?.payload?.sub;
    if (!auth0Id) {
      return res.status(401).json({ error: "Unauthorized" });
    }

    // Debug logging
    console.log("Full Auth0 Payload:", req.auth.payload);

    // Pentru Google OAuth, email-ul poate fi √Æn alt loc
    const email =
      req.auth.payload.email ||
      req.auth.payload["https://example.com/email"] ||
      `${auth0Id}@placeholder.com`; // fallback

    const name =
      req.auth.payload.name ||
      req.auth.payload.nickname ||
      req.auth.payload["https://example.com/name"] ||
      email.split("@")[0]; // folosim partea din email ca nume dacƒÉ nu avem altceva

    console.log("Extracted user info:", { auth0Id, email, name });

    let user = await User.findOne({ auth0Id });

    if (!user) {
      console.log("Creating new user with:", { auth0Id, email, name });
      user = await User.create({
        auth0Id,
        email,
        name,
      });
      console.log("New user created:", user);
    } else {
      console.log("Found existing user:", user);
    }

    req.user = user;
    next();
  } catch (error) {
    console.error("User middleware error:", error);
    res.status(500).json({
      error: "Internal server error",
      details: error.message,
      payload: req.auth?.payload,
    });
  }
};

app.get("/api/profile", checkJwt, getUserMiddleware, async (req, res) => {
  try {
    let profile = await Profile.findOne({ auth0Id: req.user.auth0Id });

    if (!profile) {
      profile = await Profile.create({
        auth0Id: req.user.auth0Id,
        name: req.user.name || "User",
      });
    }

    // CalculeazƒÉ statisticile
    const stats = {
      totalQuizzes: await Quiz.countDocuments({ createdBy: req.user.auth0Id }),
      totalQuestions: await Question.countDocuments({
        createdBy: req.user.auth0Id,
      }),
      totalCompletions: await QuizCompletion.countDocuments({
        quiz: {
          $in: await Quiz.find({ createdBy: req.user.auth0Id }).distinct("_id"),
        },
      }),
    };

    res.json({
      ...profile.toObject(),
      stats,
    });
  } catch (error) {
    console.error("Error fetching profile:", error);
    res.status(500).json({ error: "Error fetching profile" });
  }
});

app.put("/api/profile", checkJwt, getUserMiddleware, async (req, res) => {
  try {
    const allowedUpdates = ["name", "emailPreferences", "theme"];
    const updates = {};

    allowedUpdates.forEach((field) => {
      if (req.body[field] !== undefined) {
        updates[field] = req.body[field];
      }
    });

    updates.updatedAt = new Date();

    const profile = await Profile.findOneAndUpdate(
      { auth0Id: req.user.auth0Id },
      updates,
      { new: true, runValidators: true }
    );

    if (!profile) {
      return res.status(404).json({ error: "Profile not found" });
    }

    res.json(profile);
  } catch (error) {
    console.error("Error updating profile:", error);
    res.status(500).json({ error: "Error updating profile" });
  }
});

app.get("/api/dashboard", checkJwt, getUserMiddleware, async (req, res) => {
  try {
    // GƒÉsim toate quiz-urile utilizatorului
    const userQuizzes = await Quiz.find({ createdBy: req.user.auth0Id });
    const quizIds = userQuizzes.map((q) => q._id);

    // Data pentru ultima lunƒÉ
    const lastMonth = new Date();
    lastMonth.setMonth(lastMonth.getMonth() - 1);

    // CalculƒÉm toate statisticile
    const [completions, views] = await Promise.all([
      // NumƒÉrul de completƒÉri
      QuizCompletion.countDocuments({
        quizId: { $in: quizIds },
        createdAt: { $gte: lastMonth },
      }),

      // NumƒÉrul de vizualizƒÉri
      QuizView.countDocuments({
        quizId: { $in: quizIds },
        createdAt: { $gte: lastMonth },
      }),
    ]);

    console.log("Dashboard Stats:", {
      quizIds,
      completions,
      views,
      userQuizzes: userQuizzes.length,
    });

    const stats = {
      totalQuizzes: userQuizzes.length,
      publishedQuizzes: userQuizzes.filter((q) => q.isPublished).length,
      totalQuestions: userQuizzes.reduce(
        (acc, quiz) => acc + quiz.questions.length,
        0
      ),
      totalCompletions: completions,
      completionRate: views > 0 ? Math.round((completions / views) * 100) : 0,
      totalViews: views,
    };

    // Ob»õinem activitatea recentƒÉ
    const recentActivity = await Activity.find({
      userId: req.user.auth0Id,
    })
      .sort("-createdAt")
      .limit(5)
      .lean()
      .then((activities) =>
        activities.map((activity) => ({
          id: activity._id,
          type: activity.type,
          title: activity.title,
          time: new Date(activity.createdAt).toLocaleDateString("ro-RO", {
            day: "numeric",
            month: "long",
            hour: "2-digit",
            minute: "2-digit",
          }),
          details: activity.details,
        }))
      );

    console.log("Sending dashboard response:", { stats, recentActivity });
    res.json({ stats, recentActivity });
  } catch (error) {
    console.error("Error fetching dashboard data:", error);
    res.status(500).json({ error: "Error fetching dashboard data" });
  }
});

app.get("/api/quiz/:id", async (req, res) => {
  try {
    const quiz = await Quiz.findOne({
      _id: req.params.id,
      isPublished: true,
    }).populate("questions.question");

    if (!quiz) {
      return res.status(404).json({ error: "Quiz not found or not published" });
    }

    // TransformƒÉm datele pentru interfa»õa publicƒÉ
    const publicQuiz = {
      _id: quiz._id,
      title: quiz.title,
      description: quiz.description,
      questions: quiz.questions.map((q) => ({
        _id: q.question._id,
        text: q.question.text,
        feedbackYes: q.question.feedbackYes,
        feedbackNo: q.question.feedbackNo,
      })),
    };

    res.json(publicQuiz);
  } catch (error) {
    console.error("Error fetching quiz:", error);
    res.status(500).json({ error: "Error fetching quiz" });
  }
});

app.patch(
  "/api/quizzes/:id/assign-questions",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const quiz = await Quiz.findOne({
        _id: req.params.id,
        createdBy: req.user.auth0Id,
      });

      if (!quiz) {
        return res.status(404).json({ error: "Quiz not found" });
      }

      const { questionIds } = req.body;
      const questions = await Question.find({ _id: { $in: questionIds } });

      // AdƒÉugƒÉm √ÆntrebƒÉrile la quiz
      const newQuestions = questions.map((q, index) => ({
        question: q._id,
        order: quiz.questions.length + index,
      }));

      quiz.questions.push(...newQuestions);
      await quiz.save();

      // PopulƒÉm √ÆntrebƒÉrile pentru rƒÉspuns
      await quiz.populate("questions.question");

      res.json(quiz);
    } catch (error) {
      console.error("Error assigning questions:", error);
      res.status(500).json({ error: error.message });
    }
  }
);

app.post("/api/quiz/submit", async (req, res) => {
  try {
    const { quizId, answers, email } = req.body;

    // GƒÉsim quiz-ul
    const quiz = await Quiz.findById(quizId);
    if (!quiz) {
      return res.status(404).json({ error: "Quiz not found" });
    }

    // SalvƒÉm completarea
    const completion = new QuizCompletion({
      quizId,
      email,
      answers,
    });
    await completion.save();

    // √énregistrƒÉm activitatea
    const activity = new Activity({
      type: "quiz-completed",
      userId: quiz.createdBy,
      title: `Quiz completat: ${quiz.title}`,
      details: {
        quizId: quiz._id,
        quizTitle: quiz.title,
        completedBy: email,
      },
    });
    await activity.save();

    // GenerƒÉm PDF-ul »ôi trimitem email-ul
    const doc = new jsPDF();
    let yPos = 20;

    // Header
    doc.setFontSize(20);
    doc.text("Rezultate Quiz", 105, yPos, { align: "center" });
    yPos += 20;

    doc.setFontSize(14);
    doc.text(quiz.title, 105, yPos, { align: "center" });
    yPos += 20;

    // Data
    doc.setFontSize(12);
    doc.text(`Data: ${new Date().toLocaleDateString("ro-RO")}`, 20, yPos);
    yPos += 10;

    // Questions and answers
    quiz.questions.forEach((question, index) => {
      const answer = answers[question._id];

      // VerificƒÉ spa»õiul disponibil pe paginƒÉ
      if (yPos > 250) {
        doc.addPage();
        yPos = 20;
      }

      doc.setFontSize(12);
      doc.setFont(undefined, "bold");
      doc.text(`${index + 1}. ${question.text}`, 20, yPos);
      yPos += 10;

      doc.setFont(undefined, "normal");
      doc.text(`RƒÉspuns: ${answer ? "Da" : "Nu"}`, 20, yPos);
      yPos += 10;

      const feedback = answer ? question.feedbackYes : question.feedbackNo;
      const lines = doc.splitTextToSize(feedback, 170);
      lines.forEach((line) => {
        if (yPos > 280) {
          doc.addPage();
          yPos = 20;
        }
        doc.text(line, 20, yPos);
        yPos += 7;
      });

      yPos += 10;
    });

    // Trimite email cu PDF
    const pdfBuffer = Buffer.from(doc.output("arraybuffer"));

    const msg = {
      to: email,
      from: process.env.SENDGRID_VERIFIED_SENDER,
      subject: `Rezultate Quiz: ${quiz.title}`,
      text: "GƒÉse»ôti ata»ôat rezultatele tale pentru quiz-ul completat.",
      attachments: [
        {
          content: pdfBuffer.toString("base64"),
          filename: "rezultate.pdf",
          type: "application/pdf",
          disposition: "attachment",
        },
      ],
    };

    await sgMail.send(msg);

    res.json({ success: true });
  } catch (error) {
    console.error("Error submitting quiz:", error);
    res.status(500).json({ error: "Error submitting quiz results" });
  }
});

// Creare quiz nou
app.post("/api/quizzes", checkJwt, getUserMiddleware, async (req, res) => {
  try {
    const quiz = new Quiz({
      title: req.body.title,
      description: req.body.description,
      createdBy: req.user.auth0Id,
      questions: [],
    });
    await quiz.save();

    // √énregistrƒÉm activitatea
    await new Activity({
      type: "quiz-created",
      userId: req.user.auth0Id,
      title: `Quiz nou creat: ${quiz.title}`,
      details: {
        quizId: quiz._id,
        quizTitle: quiz.title,
      },
    }).save();

    res.json(quiz);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Ob»õine toate quizurile unui user
app.get("/api/quizzes", checkJwt, getUserMiddleware, async (req, res) => {
  try {
    // Ob»õinem toate quizurile userului
    const quizzes = await Quiz.find({ createdBy: req.user.auth0Id });

    // Ob»õinem completƒÉrile pentru fiecare quiz
    const quizzesWithStats = await Promise.all(
      quizzes.map(async (quiz) => {
        const completions = await QuizCompletion.countDocuments({
          quizId: quiz._id,
        });
        return {
          ...quiz.toObject(),
          completions,
        };
      })
    );

    // SortƒÉm quizurile - publicate primele, apoi dupƒÉ datƒÉ
    const sortedQuizzes = quizzesWithStats.sort((a, b) => {
      if (a.isPublished === b.isPublished) {
        return new Date(b.createdAt) - new Date(a.createdAt);
      }
      return b.isPublished - a.isPublished;
    });

    res.json(sortedQuizzes);
  } catch (error) {
    console.error("Error fetching quizzes:", error);
    res.status(500).json({ error: error.message });
  }
});

// Ob»õine un quiz specific
app.get("/api/quizzes/:id", checkJwt, getUserMiddleware, async (req, res) => {
  try {
    const quiz = await Quiz.findOne({
      _id: req.params.id,
      createdBy: req.user.auth0Id,
    }).populate("questions.question"); // Populate detaliile √ÆntrebƒÉrilor

    if (!quiz) {
      return res.status(404).json({ error: "Quiz not found" });
    }

    res.json(quiz);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.delete(
  "/api/quizzes/:id",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      // GƒÉsim quiz-ul »ôi verificƒÉm dacƒÉ apar»õine userului curent
      const quiz = await Quiz.findOne({
        _id: req.params.id,
        createdBy: req.user.auth0Id,
      });

      if (!quiz) {
        return res.status(404).json({ error: "Quiz not found" });
      }

      // »òtergem completƒÉrile asociate
      await QuizCompletion.deleteMany({ quizId: quiz._id });

      // »òtergem quiz-ul
      await Quiz.deleteOne({ _id: quiz._id });

      res.json({ success: true });
    } catch (error) {
      console.error("Error deleting quiz:", error);
      res.status(500).json({ error: "Error deleting quiz" });
    }
  }
);

// RutƒÉ publicƒÉ pentru vizualizarea unui quiz
app.get("/api/public/quizzes/:id", async (req, res) => {
  try {
    const quiz = await Quiz.findOne({
      _id: req.params.id,
      isPublished: true, // returneazƒÉ doar quizurile publicate
    });

    if (!quiz) {
      return res.status(404).json({ error: "Quiz not found or not published" });
    }

    // ReturnƒÉm doar informa»õiile necesare pentru completare
    const publicQuiz = {
      _id: quiz._id,
      title: quiz.title,
      description: quiz.description,
      questions: quiz.questions.map((q) => ({
        _id: q._id,
        text: q.text,
      })),
    };

    res.json(publicQuiz);
  } catch (error) {
    console.error("Error fetching public quiz:", error);
    res.status(500).json({ error: "Error fetching quiz" });
  }
});

// AdaugƒÉ o √Æntrebare la quiz
app.post(
  "/api/quizzes/:id/questions",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const quiz = await Quiz.findOne({
        _id: req.params.id,
        createdBy: req.user.auth0Id,
      });

      if (!quiz) {
        return res.status(404).json({ error: "Quiz not found" });
      }

      quiz.questions.push({
        text: req.body.text,
        feedbackYes: req.body.feedbackYes,
        feedbackNo: req.body.feedbackNo,
      });

      await quiz.save();

      // √énregistrƒÉm activitatea
      await new Activity({
        type: "question-added",
        userId: req.user.auth0Id,
        title: `√éntrebare nouƒÉ adƒÉugatƒÉ √Æn ${quiz.title}`,
        details: {
          quizId: quiz._id,
          quizTitle: quiz.title,
          questionText: req.body.text,
        },
      }).save();

      res.json(quiz);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
);

// PublicƒÉ/DepublicƒÉ quiz
app.patch(
  "/api/quizzes/:id/publish",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const quiz = await Quiz.findOneAndUpdate(
        { _id: req.params.id, createdBy: req.user.auth0Id },
        { isPublished: req.body.isPublished },
        { new: true }
      );

      if (!quiz) {
        return res.status(404).json({ error: "Quiz not found" });
      }

      res.json(quiz);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
);

// Routes protejate
app.get("/api/questions", checkJwt, getUserMiddleware, async (req, res) => {
  try {
    console.log("Fetching questions for user:", req.user.auth0Id);

    const questions = await Question.find({ createdBy: req.user.auth0Id }).sort(
      "-createdAt"
    );

    // Log complet al √ÆntrebƒÉrilor gƒÉsite
    console.log(
      "Questions found (complete objects):",
      JSON.stringify(questions, null, 2)
    );

    res.json(questions);
  } catch (error) {
    console.error("Error fetching questions:", error);
    res.status(500).json({ error: error.message });
  }
});

app.post("/api/questions", checkJwt, getUserMiddleware, async (req, res) => {
  try {
    console.log("Headers:", req.headers);
    console.log("Raw body:", req.body);

    const { text, feedbackYes, feedbackNo } = req.body;

    if (!text?.trim()) {
      return res.status(400).json({ error: "√éntrebarea este obligatorie" });
    }
    if (!feedbackYes?.trim()) {
      return res
        .status(400)
        .json({ error: "Feedback-ul pentru DA este obligatoriu" });
    }
    if (!feedbackNo?.trim()) {
      return res
        .status(400)
        .json({ error: "Feedback-ul pentru NU este obligatoriu" });
    }

    const questionData = {
      text: text.trim(),
      feedbackYes: feedbackYes.trim(),
      feedbackNo: feedbackNo.trim(),
      createdBy: req.user.auth0Id,
    };

    console.log("Creating question with data:", questionData);

    const question = new Question(questionData);
    const savedQuestion = await question.save();

    console.log("Question saved successfully:", savedQuestion);
    res.json(savedQuestion);
  } catch (error) {
    console.error("Error creating question:", error);
    res.status(500).json({
      error: "Error creating question",
      details: error.message,
      stack: error.stack,
    });
  }
});

app.put("/api/questions/:id", checkJwt, getUserMiddleware, async (req, res) => {
  try {
    const question = await Question.findOneAndUpdate(
      {
        _id: req.params.id,
        createdBy: req.user.auth0Id,
      },
      req.body,
      { new: true }
    );

    if (!question) {
      return res.status(404).json({ error: "Question not found" });
    }

    res.json(question);
  } catch (error) {
    console.error("Error updating question:", error);
    res.status(500).json({ error: "Error updating question" });
  }
});

app.delete(
  "/api/questions/:id",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const question = await Question.findOneAndDelete({
        _id: req.params.id,
        createdBy: req.user.auth0Id,
      });

      if (!question) {
        return res.status(404).json({ error: "Question not found" });
      }

      res.json({ success: true });
    } catch (error) {
      console.error("Error deleting question:", error);
      res.status(500).json({ error: "Error deleting question" });
    }
  }
);

app.get("/api/quizzes/:userId", async (req, res) => {
  try {
    const questions = await Question.find({
      createdBy: req.params.userId,
      // Putem adƒÉuga aici »ôi alte filtre (ex: active: true)
    }).sort("createdAt");

    res.json(questions);
  } catch (error) {
    console.error("Error fetching quiz questions:", error);
    res.status(500).json({ error: error.message });
  }
});

app.delete(
  "/api/quizzes/:quizId/questions/:questionIndex",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const quiz = await Quiz.findOne({
        _id: req.params.quizId,
        createdBy: req.user.auth0Id,
      });

      if (!quiz) {
        return res.status(404).json({ error: "Quiz not found" });
      }

      // VerificƒÉ dacƒÉ indexul este valid
      const questionIndex = parseInt(req.params.questionIndex);
      if (questionIndex < 0 || questionIndex >= quiz.questions.length) {
        return res.status(400).json({ error: "Invalid question index" });
      }

      // »òterge √Æntrebarea din array folosind splice
      quiz.questions.splice(questionIndex, 1);
      await quiz.save();

      console.log(
        `Question at index ${questionIndex} deleted from quiz ${quiz._id}`
      );
      res.json(quiz);
    } catch (error) {
      console.error("Error deleting question:", error);
      res.status(500).json({ error: error.message });
    }
  }
);

// GET toate √ÆntrebƒÉrile (cu filtre »ôi informa»õii despre usage)
app.get(
  "/api/questions/bank",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const questions = await Question.find({ createdBy: req.user.auth0Id })
        .sort("-createdAt")
        .populate("usedInQuizzes", "title"); // PopulƒÉm informa»õii despre quizurile √Æn care e folositƒÉ

      res.json(questions);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
);

// POST - creeazƒÉ o √Æntrebare nouƒÉ √Æn banca de √ÆntrebƒÉri
app.post(
  "/api/questions/bank",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const question = new Question({
        text: req.body.text,
        feedbackYes: req.body.feedbackYes,
        feedbackNo: req.body.feedbackNo,
        category: req.body.category,
        tags: req.body.tags,
        createdBy: req.user.auth0Id,
      });
      await question.save();
      res.json(question);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
);

// PATCH - asigneazƒÉ √ÆntrebƒÉri la un quiz
app.patch(
  "/api/quizzes/:quizId/assign-questions",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const { questionIds } = req.body; // Array de ID-uri de √ÆntrebƒÉri
      const quiz = await Quiz.findOne({
        _id: req.params.quizId,
        createdBy: req.user.auth0Id,
      });

      if (!quiz) {
        return res.status(404).json({ error: "Quiz not found" });
      }

      // AdƒÉugƒÉm √ÆntrebƒÉrile la quiz
      const newQuestions = questionIds.map((qId, index) => ({
        question: qId,
        order: quiz.questions.length + index,
      }));

      quiz.questions.push(...newQuestions);
      await quiz.save();

      // ActualizƒÉm »ôi referin»õele √Æn √ÆntrebƒÉri
      await Question.updateMany(
        { _id: { $in: questionIds } },
        { $addToSet: { usedInQuizzes: quiz._id } }
      );

      res.json(quiz);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
);

// DELETE - »ôterge o √Æntrebare din banca de √ÆntrebƒÉri
app.delete(
  "/api/questions/bank/:id",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const question = await Question.findOne({
        _id: req.params.id,
        createdBy: req.user.auth0Id,
      });

      if (!question) {
        return res.status(404).json({ error: "Question not found" });
      }

      // VerificƒÉm dacƒÉ √Æntrebarea e folositƒÉ √Æn vreun quiz
      if (question.usedInQuizzes?.length > 0) {
        return res.status(400).json({
          error: "Cannot delete question that is used in quizzes",
          quizzes: question.usedInQuizzes,
        });
      }

      await question.delete();
      res.json({ success: true });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
);

app.put(
  "/api/quizzes/:quizId",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const quiz = await Quiz.findOne({
        _id: req.params.quizId,
        createdBy: req.user.auth0Id,
      });

      if (!quiz) {
        return res.status(404).json({ error: "Quiz not found" });
      }

      // ActualizƒÉm lista de √ÆntrebƒÉri
      quiz.questions = req.body.questions;

      await quiz.save();
      await quiz.populate("questions.question");

      res.json(quiz);
    } catch (error) {
      console.error("Error updating quiz:", error);
      res.status(500).json({ error: error.message });
    }
  }
);

// PUT - actualizeazƒÉ o √Æntrebare din bancƒÉ
app.put(
  "/api/questions/bank/:id",
  checkJwt,
  getUserMiddleware,
  async (req, res) => {
    try {
      const question = await Question.findOneAndUpdate(
        {
          _id: req.params.id,
          createdBy: req.user.auth0Id,
        },
        {
          text: req.body.text,
          feedbackYes: req.body.feedbackYes,
          feedbackNo: req.body.feedbackNo,
          category: req.body.category,
          tags: req.body.tags,
        },
        { new: true }
      );

      if (!question) {
        return res.status(404).json({ error: "Question not found" });
      }

      res.json(question);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
);

// Server startup
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

================
File: src/App.vue
================
<template>
  <div
    class="min-h-screen transition-colors duration-200 bg-gray-50 dark:bg-dark-bg dark:text-dark-text antialiased text-slate-500 dark:text-slate-400 bg-white dark:bg-slate-900">
    <NavBar />
    <router-view />
  </div>
</template>

<style lang="scss">
#app {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
}

nav {

  a {

    color: #2c3e50;

    &.router-link-exact-active {
      color: #699D4C;
      font-weight: bold;
    }
  }
}
</style>

<script setup>
import NavBar from '@/components/NavBar.vue'
</script>

================
File: src/assets/main.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .nav-link {
    @apply py-2 text-sm  my-0  flex items-center whitespace-nowrap px-4 transition-colors dark:text-white;
  }
}

================
File: src/components/ActivityItem.vue
================
<template>
  <div class="flex items-center p-4 bg-gray-50 rounded-lg">
    <span 
      class="w-8 h-8 flex items-center justify-center rounded-lg"
      :class="typeClass"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path 
          stroke-linecap="round" 
          stroke-linejoin="round" 
          stroke-width="2" 
          :d="icon" 
        />
      </svg>
    </span>
    <div class="ml-4 flex-1">
      <p class="text-sm font-medium text-gray-900">{{ title }}</p>
      <p class="text-sm text-gray-500">{{ time }}</p>
    </div>
    <button 
      v-if="actionLink"
      @click="$router.push(actionLink)"
      class="ml-4 text-sm text-blue-600 hover:text-blue-800"
    >
      Vezi
    </button>
  </div>
</template>

<script setup>
import { computed } from 'vue'
import { defineProps } from "vue";

const props = defineProps({
  type: {
    type: String,
    required: true
  },
  title: {
    type: String,
    required: true
  },
  time: {
    type: String,
    required: true
  },
  actionLink: {
    type: String,
    default: ''
  }
})

const typeClass = computed(() => {
  const classes = {
    'quiz-created': 'bg-blue-50 text-blue-500',
    'quiz-completed': 'bg-green-50 text-green-500',
    'question-added': 'bg-purple-50 text-purple-500'
  }
  return classes[props.type] || 'bg-gray-50 text-gray-500'
})

const icon = computed(() => {
  const icons = {
    'quiz-created': 'M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2',
    'quiz-completed': 'M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z',
    'question-added': 'M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'
  }
  return icons[props.type] || ''
})
</script>

================
File: src/components/AuthButton.vue
================
<template>
  <div>
    <button v-if="!isAuthenticated" @click="login"
      class="bg-primary hover:bg-primary/90 text-white px-4 py-2 rounded-lg transition-all">
      Log In
    </button>

    <div v-else class="flex items-center space-x-4">
      <span class="text-sm text-gray-600">{{ user?.email }}</span>
      <button @click="logout" class="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg transition-all">
        Log Out
      </button>
    </div>
  </div>
</template>

<script setup>
import { useAuth0 } from '@auth0/auth0-vue';
import { useRouter } from 'vue-router';

const router = useRouter();
const {
  loginWithRedirect,
  logout: auth0Logout,
  user,
  isAuthenticated,
} = useAuth0();

const login = () => {
  loginWithRedirect({
    appState: { targetUrl: '/admin' }  // AdƒÉugat pentru redirect
  });
}

const logout = () => {
  auth0Logout({
    logoutParams: {
      returnTo: window.location.origin
    }
  });
}
</script>

================
File: src/components/BaseModal.vue
================
<template>
  <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg max-w-md w-full mx-4">
      <!-- Header -->
      <div class="p-4 border-b">
        <slot name="header">
          <h3 class="text-lg font-medium text-gray-900">
            Modal Title
          </h3>
        </slot>
      </div>

      <!-- Content -->
      <div class="p-4">
        <slot></slot>
      </div>

      <!-- Footer -->
      <div class="p-4 border-t">
        <slot name="footer">
          <div class="flex justify-end space-x-3">
            <button 
              @click="$emit('close')"
              class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
            >
              √énchide
            </button>
          </div>
        </slot>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'BaseModal',
  emits: ['close']
}
</script>

<style scoped>
.fixed {
  animation: fadeIn 0.2s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
</style>

================
File: src/components/HelloWorld.vue
================
<template>
  <div class="hello">
    <h1>{{ msg }}</h1>
    <p>
      For a guide and recipes on how to configure / customize this project,<br>
      check out the
      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.
    </p>
    <h3>Installed CLI Plugins</h3>
    <ul>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-router" target="_blank" rel="noopener">router</a></li>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-vuex" target="_blank" rel="noopener">vuex</a></li>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>
    </ul>
    <h3>Essential Links</h3>
    <ul>
      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>
      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>
      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>
      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>
      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>
    </ul>
    <h3>Ecosystem</h3>
    <ul>
      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>
      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>
      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>
      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>
      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>
    </ul>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',
  props: {
    msg: String
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped lang="scss">
h3 {
  margin: 40px 0 0;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
</style>

================
File: src/components/NavBar.vue
================
<!-- src/components/NavBar.vue -->
<template>
  <nav
    class=" sticky top-0 z-40 w-full backdrop-blur flex-none transition-colors duration-500 lg:z-50 lg:border-b lg:border-slate-900/10 dark:border-slate-50/[0.06] bg-white/95 supports-backdrop-blur:bg-white/60 dark:bg-transparent">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between align-middle h-20">
        <div class="flex items-center">
          <router-link to="/" class="text-xl font-bold text-gray-800 dark:text-white">
            Quiz App
          </router-link>
        </div>
        <div class="flex items-center gap-4">
          <!-- Skeleton loader c√¢nd se √ÆncarcƒÉ -->
          <div v-if="isLoading" class="flex items-center gap-4">
            <div class="h-8 w-24 bg-gray-200 animate-pulse rounded"></div>
            <div class="h-8 w-20 bg-gray-200 animate-pulse rounded"></div>
          </div>

          <!-- Con»õinut dupƒÉ ce s-a √ÆncƒÉrcat -->
          <template v-else>
            <template v-if="isAuthenticated">
              <div class="flex gap-4">
                <router-link to="/dashboard" class="nav-link">Dashboard</router-link>
                <router-link to="/questions/bank" class="nav-link">√éntrebƒÉri</router-link>
                <router-link to="/my-quizzes" class="nav-link">Quizuri</router-link>
                <nav
                  class="backdrop-blur-sm shadow isolate bg-white/20 dark:bg-dark-card/20 shadow-lg ring-1 ring-black/5 dark:ring-white/5">
                </nav>
              </div>

              <div class="group inline-block relative">
                <button class="inline-flex items-center">
                  <span class="mr-1">
                    <span class="text-sm text-gray-600 dark:text-white flex items-end gap-1 nav-link">
                      <!-- SVG user icon -->
                      <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-gray-500 dark:text-white"
                        viewBox="0 0 24 24" fill="currentColor">
                        <path
                          d="M12 12c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm0 2c-3.33 0-10 1.67-10 5v2h20v-2c0-3.33-6.67-5-10-5z" />
                      </svg>

                      <!-- Display user's first name -->
                      {{ user.given_name }}
                    </span>
                  </span>
                  <svg class="fill-current h-3 w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </button>
                <ul
                  class="overflow-hidden absolute hidden text-gray-700 pt-0  group-hover:block w-[100%] bg-white shadow-lg ">

                  <router-link to="/profile"
                    class="p-2 block hover:bg-slate-100 transition-colors bottom-1 border-b-[1px]">Cont</router-link>
                  <li class=" p-2 hover:bg-slate-100 transition-colors">
                    <button @click="handleLogout" class="">
                      Logout
                    </button>
                  </li>

                </ul>
              </div>
            </template>
            <button v-else @click="handleLogin"
              class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
              Login
            </button>
          </template>
        </div>
      </div>
    </div>
  </nav>
</template>

<script setup>
import { useAuth0 } from '@auth0/auth0-vue';

const {
  loginWithRedirect,
  logout,
  user,
  isAuthenticated,
  isLoading
} = useAuth0();

const handleLogin = () => {
  loginWithRedirect({
    appState: { targetUrl: '/admin' }
  });
};

const handleLogout = () => {
  logout({
    logoutParams: {
      returnTo: window.location.origin
    }
  });
};

</script>

================
File: src/components/QuizComponent.vue
================
<script setup>
import { ref, computed } from 'vue'
import axios from 'axios'
import { jsPDF } from 'jspdf'

const API_URL = 'http://localhost:3000/api'

const questions = ref([])
const currentQuestionIndex = ref(0)
const answers = ref({})
const userEmail = ref('')
const emailError = ref(false)
const isLoading = ref(true)

// Fetch questions from DB
const loadQuestions = async () => {
  try {
    const response = await axios.get(`${API_URL}/questions`)
    questions.value = response.data
    isLoading.value = false
  } catch (error) {
    console.error('Error loading questions:', error)
    isLoading.value = false
  }
}

const currentQuestion = computed(() =>
  questions.value[currentQuestionIndex.value]
)

const isCompleted = computed(() =>
  currentQuestionIndex.value >= questions.value.length
)

const progress = computed(() =>
  (currentQuestionIndex.value / questions.value.length) * 100
)

const isValidEmail = computed(() => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(userEmail.value)
})

const answerQuestion = (answer) => {
  if (currentQuestion.value) {
    answers.value[currentQuestion.value._id] = answer
    currentQuestionIndex.value++
  }
}

const generatePDF = async () => {
  const doc = new jsPDF({
    unit: 'mm',
    format: 'a4',
    compress: true
  })

  // Header
  doc.setFontSize(22)
  doc.text('Raport de Evaluare', 105, 25, { align: 'center' })

  // Data
  doc.setFontSize(12)
  const date = new Date().toLocaleDateString('ro-RO', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  }).split('.').join('.')
  doc.text(`Generat la: ${date}`, 105, 35, { align: 'center' })

  let yPos = 50

  // Parcurgere √ÆntrebƒÉri »ôi rƒÉspunsuri
  for (const question of questions.value) {
    const userAnswer = answers.value[question._id]

    // VerificƒÉ spa»õiul disponibil
    if (yPos > 250) {
      doc.addPage()
      yPos = 30
    }

    // √éntrebarea
    doc.setFontSize(12)
    doc.setFont("helvetica", "normal")
    doc.text(`${question.text}`, 20, yPos)
    yPos += 10

    // RƒÉspuns
    doc.setFontSize(12)
    doc.text(`RƒÉspuns: ${userAnswer ? 'Da' : 'Nu'}`, 20, yPos, {
      charSpace: 0
    })
    yPos += 8

    // Feedback
    const feedback = userAnswer ? question.feedbackYes : question.feedbackNo
    const splitFeedback = doc.splitTextToSize(feedback, 170)

    doc.setFontSize(12)
    splitFeedback.forEach(line => {
      if (yPos > 270) {
        doc.addPage()
        yPos = 30
      }
      doc.text(line, 20, yPos, {
        charSpace: 0
      })
      yPos += 7
    })

    yPos += 10
  }

  // Footer
  doc.setFontSize(10)
  doc.text('Document generat automat', 105, 280, {
    align: 'center',
    charSpace: 0
  })

  return doc.output('blob')
}

const submitResults = async () => {
  if (!isValidEmail.value) {
    emailError.value = true
    return
  }

  try {
    console.log('√éncepe generarea PDF-ului')
    const pdfBlob = await generatePDF()
    console.log('PDF generat cu succes')

    const formData = new FormData()
    formData.append('pdf', pdfBlob, 'rezultate.pdf')
    formData.append('email', userEmail.value)

    console.log('Trimitere request cƒÉtre server:', userEmail.value)
    const response = await axios.post(`${API_URL}/send-results`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    })

    console.log('RƒÉspuns de la server:', response.data)

    if (response.data.success) {
      alert('Rezultatele au fost trimise pe email!')
    } else {
      throw new Error('RƒÉspuns nea»ôteptat de la server')
    }
  } catch (error) {
    console.error('Eroare completƒÉ:', error)
    console.error('RƒÉspuns server (dacƒÉ existƒÉ):', error.response?.data)

    let errorMessage = 'A apƒÉrut o eroare. '
    if (error.response) {
      errorMessage += error.response.data.details || error.response.data.error || 'Eroare server'
    } else if (error.request) {
      errorMessage += 'Nu s-a putut contacta serverul'
    } else {
      errorMessage += error.message
    }

    alert(errorMessage)
  }
}

// Load questions when component is mounted
loadQuestions()
</script>

<template>
  <div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-12 px-4">
    <div class="max-w-2xl mx-auto">
      <!-- Loading state -->
      <div v-if="isLoading" class="text-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
        <p class="mt-4 text-gray-600">Se √ÆncarcƒÉ √ÆntrebƒÉrile...</p>
      </div>

      <!-- Quiz content -->
      <div v-else-if="!isCompleted && questions.length > 0"
        class="bg-white/70 backdrop-blur-lg rounded-2xl p-8 shadow-lg border border-gray-100">
        <div class="space-y-6">
          <!-- Progress -->
          <div class="flex items-center justify-between mb-6">
            <span class="text-sm font-medium text-gray-500">
              Progres
            </span>
            <span class="text-sm font-medium text-gray-500">
              {{ currentQuestionIndex + 1 }}/{{ questions.length }}
            </span>
          </div>

          <div class="w-full bg-gray-200 rounded-full h-2 mb-8">
            <div class="bg-primary h-2 rounded-full transition-all duration-300" :style="{ width: `${progress}%` }">
            </div>
          </div>

          <!-- Question -->
          <h2 class="text-2xl font-medium text-gray-800 mb-8">
            {{ currentQuestion.text }}
          </h2>

          <!-- Answer buttons -->
          <div class="flex gap-4 justify-center">
            <button @click="answerQuestion(true)"
              class="flex-1 py-3 px-6 bg-primary hover:bg-primary/90 text-gray-800 rounded-xl shadow-md hover:shadow-lg transition-all duration-200">
              Da
            </button>
            <button @click="answerQuestion(false)"
              class="flex-1 py-3 px-6 bg-white hover:bg-gray-50 text-gray-800 border border-gray-200 rounded-xl shadow-sm hover:shadow-md transition-all duration-200">
              Nu
            </button>
          </div>
        </div>
      </div>

      <!-- No questions state -->
      <div v-else-if="!isLoading && questions.length === 0" class="text-center py-12">
        <p class="text-gray-600">Nu existƒÉ √ÆntrebƒÉri disponibile momentan.</p>
      </div>

      <!-- Completion state -->
      <div v-else class="bg-white/70 backdrop-blur-lg rounded-2xl p-8 shadow-lg border border-gray-100">
        <div class="text-center space-y-6">
          <div class="mb-8">
            <div class="inline-flex items-center justify-center w-16 h-16 bg-primary/20 rounded-full mb-4">
              <svg class="w-8 h-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <h2 class="text-2xl font-semibold text-gray-800 mb-2">
              FelicitƒÉri! Ai finalizat evaluarea
            </h2>
            <p class="text-gray-600">
              Introdu adresa ta de email pentru a primi raportul personalizat.
            </p>
          </div>

          <div class="max-w-md mx-auto">
            <input type="email" v-model="userEmail" placeholder="email@example.com"
              class="w-full px-4 py-3 rounded-xl border border-gray-200 mb-4 focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none"
              :class="{ 'border-red-300': emailError }">
            <button @click="submitResults"
              class="w-full py-3 px-6 bg-primary hover:bg-primary/90 text-gray-800 rounded-xl shadow-md hover:shadow-lg transition-all duration-200 disabled:opacity-50"
              :disabled="!isValidEmail">
              Trimite Rezultatele
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

================
File: src/components/StatsCard.vue
================
<template>
  <div class="bg-white  rounded-xl shadow-sm p-6 border border-gray-100">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-sm font-medium text-gray-500">{{ title }}</h3>
      <span :class="`p-2 bg-${color}-50 rounded-lg`">
        <svg class="w-5 h-5" :class="`text-${color}-500`" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" :d="icon" />
        </svg>
      </span>
    </div>
    <p class="text-2xl font-semibold text-gray-900">{{ value }}</p>
    <p class="text-sm text-gray-500 mt-2">
      <slot></slot>
    </p>
  </div>
</template>

<script setup>
import { defineProps } from "vue";

defineProps({
  title: {
    type: String,
    required: true
  },
  value: {
    type: [String, Number],
    required: true
  },
  color: {
    type: String,
    default: 'blue'
  },
  icon: {
    type: String,
    required: true
  }
})
</script>

================
File: src/main.js
================
import { createApp } from "vue";
import { createAuth0 } from "@auth0/auth0-vue";
import App from "./App.vue";
import router from "./router";
import "./assets/main.css";

const app = createApp(App);

app.use(
  createAuth0({
    domain: process.env.VUE_APP_AUTH0_DOMAIN,
    clientId: process.env.VUE_APP_AUTH0_CLIENT_ID,
    authorizationParams: {
      redirect_uri: window.location.origin,
      audience: process.env.VUE_APP_AUTH0_AUDIENCE,
      scope: "openid profile email",
    },
  })
);

app.use(router);
app.mount("#app");

================
File: src/router/index.js
================
import { createRouter, createWebHistory } from "vue-router";
import { authGuard } from "@auth0/auth0-vue";
import HomeView from "../views/HomeView.vue";
import QuizPage from "../views/QuizPage.vue";

const routes = [
  {
    path: "/",
    name: "Home",
    component: HomeView,
  },
  {
    path: "/quiz/:id",
    name: "Quiz",
    component: QuizPage,
  },
  {
    path: "/quiz/:id/edit",
    name: "EditQuiz",
    component: () => import("../views/EditQuizView.vue"),
    beforeEnter: authGuard,
  },
  {
    path: "/dashboard",
    name: "Dashboard",
    component: () => import("../views/DashboardView.vue"),
    beforeEnter: authGuard,
  },
  {
    path: "/questions",
    name: "Questions",
    component: () => import("../views/QuestionsView.vue"),
    beforeEnter: authGuard,
  },
  {
    path: "/my-quizzes",
    name: "MyQuizzes",
    component: () => import("../views/MyQuizzesView.vue"),
    beforeEnter: authGuard,
  },
  {
    path: "/questions/bank",
    name: "QuestionBank",
    component: () => import("../views/QuestionBankView.vue"),
    beforeEnter: authGuard,
  },
  {
    path: "/profile",
    name: "Profile",
    component: () => import("../views/ProfileView.vue"),
    beforeEnter: authGuard,
  },
];

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes,
});

export default router;

================
File: src/store/index.js
================
import { createStore } from 'vuex'

export default createStore({
  state: {
  },
  getters: {
  },
  mutations: {
  },
  actions: {
  },
  modules: {
  }
})

================
File: src/stores/questions.js
================
import { defineStore } from "pinia";
import axios from "axios";

export const useQuestionStore = defineStore("questions", {
  state: () => ({
    questions: [],
    loading: false,
    error: null,
  }),

  actions: {
    async fetchQuestions() {
      this.loading = true;
      try {
        const response = await axios.get("/admin/questions");
        this.questions = response.data;
        return response.data;
      } catch (error) {
        this.error = error.message;
        throw error;
      } finally {
        this.loading = false;
      }
    },

    async addQuestion(question) {
      try {
        const response = await axios.post("/admin/questions", question);
        return response.data;
      } catch (error) {
        this.error = error.message;
        throw error;
      }
    },

    async updateQuestion(id, question) {
      try {
        const response = await axios.put(`/admin/questions/${id}`, question);
        return response.data;
      } catch (error) {
        this.error = error.message;
        throw error;
      }
    },

    async deleteQuestion(id) {
      try {
        await axios.delete(`/admin/questions/${id}`);
      } catch (error) {
        this.error = error.message;
        throw error;
      }
    },
  },
});

================
File: src/stores/theme.js
================
import { defineStore } from "pinia";

export const useThemeStore = defineStore("theme", {
  state: () => ({
    theme: localStorage.getItem("theme") || "system",
  }),

  actions: {
    setTheme(newTheme) {
      this.theme = newTheme;
      localStorage.setItem("theme", newTheme);
      this.applyTheme();
    },

    applyTheme() {
      const isDark =
        this.theme === "dark" ||
        (this.theme === "system" &&
          window.matchMedia("(prefers-color-scheme: dark)").matches);

      if (isDark) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    },

    init() {
      // AscultƒÉ pentru schimbƒÉri de system theme
      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", () => {
          if (this.theme === "system") {
            this.applyTheme();
          }
        });

      this.applyTheme();
    },
  },
});

================
File: src/views/AboutView.vue
================
<template>
  <div class="about">
    <h1>This is an about page</h1>
  </div>
</template>

================
File: src/views/DashboardView.vue
================
<template>
  <div class="min-h-screen bg-gray-50/50 dark:bg-dark-bg">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Stats Overview -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm p-6 border border-gray-100 dark:border-dark-border">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Quizuri</h3>
            <span class="p-2 bg-blue-50 dark:bg-blue-900/50 rounded-lg">
              <svg class="w-5 h-5 text-blue-500 dark:text-blue-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-gray-100">{{ stats.totalQuizzes }}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
            {{ stats.publishedQuizzes }} publicate
          </p>
        </div>

        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm p-6 border border-gray-100 dark:border-dark-border">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">CompletƒÉri</h3>
            <span class="p-2 bg-green-50 dark:bg-green-900/50 rounded-lg">
              <svg class="w-5 h-5 text-green-500 dark:text-green-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-gray-100">{{ stats.totalCompletions }}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">√Æn ultima lunƒÉ</p>
        </div>

        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm p-6 border border-gray-100 dark:border-dark-border">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">√éntrebƒÉri</h3>
            <span class="p-2 bg-purple-50 dark:bg-purple-900/50 rounded-lg">
              <svg class="w-5 h-5 text-purple-500 dark:text-purple-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-gray-100">{{ stats.totalQuestions }}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">√Æn bancƒÉ</p>
        </div>

        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm p-6 border border-gray-100 dark:border-dark-border">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Rata Completare</h3>
            <span class="p-2 bg-rose-50 dark:bg-rose-900/50 rounded-lg">
              <svg class="w-5 h-5 text-rose-500 dark:text-rose-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-gray-100">{{ stats.completionRate }}%</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">din total accesƒÉri</p>
        </div>
      </div>

      <!-- Recent Activity & Quick Actions -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Recent Activity -->
        <div
          class="lg:col-span-2 bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border">
          <div class="p-6">
            <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-6">Activitate RecentƒÉ</h2>
            <div class="max-h-[32rem] overflow-y-auto pr-2 -mr-2">
              <div v-if="recentActivity.length === 0" class="text-center py-8">
                <svg class="w-16 h-16 text-gray-300 dark:text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor"
                  viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p class="text-gray-500 dark:text-gray-400">Nu existƒÉ activitate recentƒÉ</p>
              </div>
              <div v-else class="space-y-4">
                <div v-for="activity in recentActivity" :key="activity.id"
                  class="flex items-center p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
                  <span class="w-10 h-10 flex items-center justify-center rounded-lg"
                    :class="getActivityColor(activity.type)">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        :d="getActivityIcon(activity.type)" />
                    </svg>
                  </span>
                  <div class="ml-4 flex-1">
                    <p class="text-sm font-medium text-gray-900 dark:text-gray-100">{{ activity.title }}</p>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{{ activity.time }}</p>
                  </div>
                  <button v-if="activity.details.quizId" @click="$router.push(`/quiz/${activity.details.quizId}`)"
                    class="text-primary hover:text-primary/90 text-sm font-medium">
                    Vezi
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border">
          <div class="p-6">
            <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-6">Ac»õiuni Rapide</h2>
            <div class="space-y-3">
              <button @click="$router.push('/my-quizzes')"
                class="w-full flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700/80 transition-colors group">
                <span class="text-sm font-medium text-gray-900 dark:text-gray-100">Quiz Nou</span>
                <svg class="w-5 h-5 text-gray-500 dark:text-gray-400 group-hover:text-primary transition-colors"
                  fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
              </button>

              <button @click="$router.push('/questions/bank')"
                class="w-full flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700/80 transition-colors group">
                <span class="text-sm font-medium text-gray-900 dark:text-gray-100">BancƒÉ √éntrebƒÉri</span>
                <svg class="w-5 h-5 text-gray-500 dark:text-gray-400 group-hover:text-primary transition-colors"
                  fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                </svg>
              </button>

              <button @click="$router.push('/profile')"
                class="w-full flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700/80 transition-colors group">
                <span class="text-sm font-medium text-gray-900 dark:text-gray-100">Profil</span>
                <svg class="w-5 h-5 text-gray-500 dark:text-gray-400 group-hover:text-primary transition-colors"
                  fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useAuth0 } from '@auth0/auth0-vue'
//import { useRouter } from 'vue-router'
import axios from 'axios'

const API_URL = 'http://localhost:8080/api'
// Putem elimina router dacƒÉ √Æl folosim direct √Æn template cu $router
// const router = useRouter()
const { getAccessTokenSilently } = useAuth0()

const stats = ref({
  totalQuizzes: 0,
  publishedQuizzes: 0,
  totalQuestions: 0,
  totalCompletions: 0,
  completionRate: 0
})

const recentActivity = ref([])
const isLoading = ref(true)

const getActivityColor = (type) => {
  const colors = {
    'quiz-created': 'bg-blue-50 dark:bg-blue-900/50 text-blue-500 dark:text-blue-400',
    'quiz-completed': 'bg-green-50 dark:bg-green-900/50 text-green-500 dark:text-green-400',
    'question-added': 'bg-purple-50 dark:bg-purple-900/50 text-purple-500 dark:text-purple-400'
  }
  return colors[type] || 'bg-gray-50 dark:bg-gray-800/50 text-gray-500 dark:text-gray-400'
}

const getActivityIcon = (type) => {
  const icons = {
    'quiz-created': 'M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2',
    'quiz-completed': 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',
    'question-added': 'M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'
  }
  return icons[type] || ''
}

const loadDashboardData = async () => {
  try {
    const token = await getAccessTokenSilently()
    const response = await axios.get(`${API_URL}/dashboard`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })

    stats.value = response.data.stats
    recentActivity.value = response.data.recentActivity
  } catch (error) {
    console.error('Error loading dashboard data:', error)
  } finally {
    isLoading.value = false
  }
}

onMounted(() => {
  loadDashboardData()
})
</script>

================
File: src/views/EditQuizView.vue
================
<template>
  <div class="min-h-screen bg-gray-50/50 dark:bg-dark-bg">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Header Card -->
      <div
        class="bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border p-6 mb-8">
        <div class="flex justify-between items-start">
          <div>
            <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-100">
              {{ quiz.title }}
            </h1>
            <p class="mt-1 text-gray-500 dark:text-gray-400">{{ quiz.description }}</p>
          </div>
          <div class="flex items-center gap-3">
            <button v-if="!quiz.isPublished" @click="publishQuiz"
              class="flex items-center gap-2 px-4 py-2 bg-emerald-500 text-white rounded-lg hover:bg-emerald-600 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              PublicƒÉ Quiz
            </button>
            <button v-else @click="unpublishQuiz"
              class="flex items-center gap-2 px-4 py-2 bg-amber-500 text-white rounded-lg hover:bg-amber-600 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
              Retrage din Publicare
            </button>
            <button @click="openQuestionSelector"
              class="flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
              </svg>
              AdaugƒÉ √éntrebƒÉri
            </button>
          </div>
        </div>
      </div>

      <!-- Questions List -->
      <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border">
        <div class="p-6">
          <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-6">
            √éntrebƒÉrile Quiz-ului
          </h2>

          <div v-if="quiz.questions?.length === 0" class="text-center py-12">
            <svg class="w-16 h-16 text-gray-300 dark:text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor"
              viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="text-gray-500 dark:text-gray-400">Nu existƒÉ √ÆntrebƒÉri √ÆncƒÉ.</p>
            <button @click="openQuestionSelector" class="mt-4 text-primary hover:text-primary/90 font-medium">
              AdaugƒÉ prima √Æntrebare
            </button>
          </div>

          <draggable v-else v-model="quiz.questions" class="space-y-4" @end="handleReorder" item-key="id"
            handle=".drag-handle">
            <template #item="{ element }">
              <div
                class="border border-gray-100 dark:border-dark-border rounded-xl p-4 bg-white dark:bg-dark-card hover:shadow-md transition-all duration-200">
                <div class="flex justify-between items-start">
                  <div class="flex-1">
                    <div class="flex items-center gap-3">
                      <button
                        class="drag-handle p-2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400 cursor-move">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16" />
                        </svg>
                      </button>
                      <h3 class="font-medium text-gray-900 dark:text-gray-100">
                        {{ element.question.text }}
                      </h3>
                    </div>

                    <div class="mt-3 ml-11 space-y-2">
                      <div class="flex items-center gap-2 text-sm">
                        <span
                          class="px-2 py-1 bg-green-50 dark:bg-green-900/50 text-green-700 dark:text-green-400 rounded-md">
                          Feedback Da
                        </span>
                        <p class="text-gray-600 dark:text-gray-300">{{ element.question.feedbackYes }}</p>
                      </div>
                      <div class="flex items-center gap-2 text-sm">
                        <span class="px-2 py-1 bg-red-50 dark:bg-red-900/50 text-red-700 dark:text-red-400 rounded-md">
                          Feedback Nu
                        </span>
                        <p class="text-gray-600 dark:text-gray-300">{{ element.question.feedbackNo }}</p>
                      </div>
                    </div>
                  </div>

                  <button @click="removeQuestion(element)"
                    class="p-2 text-gray-400 dark:text-gray-500 hover:text-red-500 dark:hover:text-red-400 rounded-lg transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </div>
              </div>
            </template>
          </draggable>
        </div>
      </div>
    </div>

    <!-- Question Selector Modal -->
    <BaseModal v-if="showQuestionSelector" @close="closeQuestionSelector" class="max-w-3xl">
      <template #header>
        <h3 class="text-lg font-medium dark:text-gray-100">
          SelecteazƒÉ √éntrebƒÉri
        </h3>
      </template>

      <div class="space-y-4">
        <input v-model="questionSearch" type="text" placeholder="CautƒÉ √ÆntrebƒÉri..."
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-dark-card dark:text-gray-100" />

        <div class="max-h-96 overflow-y-auto">
          <div v-for="question in availableQuestions" :key="question._id"
            class="flex items-start p-4 hover:bg-gray-50 dark:hover:bg-gray-800/50 rounded-lg">
            <input type="checkbox" :value="question._id" v-model="selectedQuestions"
              class="mt-1 rounded text-primary focus:ring-primary" />
            <div class="ml-3">
              <p class="font-medium text-gray-900 dark:text-gray-100">{{ question.text }}</p>
              <div class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                <p><span class="font-medium">Feedback Da:</span> {{ question.feedbackYes }}</p>
                <p><span class="font-medium">Feedback Nu:</span> {{ question.feedbackNo }}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <template #footer>
        <div class="flex justify-end space-x-3">
          <button @click="closeQuestionSelector"
            class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800">
            AnuleazƒÉ
          </button>
          <button @click="addSelectedQuestions" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
            :disabled="selectedQuestions.length === 0">
            AdaugƒÉ √éntrebƒÉri Selectate
          </button>
        </div>
      </template>
    </BaseModal>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useAuth0 } from '@auth0/auth0-vue'
import { useRoute, useRouter } from 'vue-router'
import axios from 'axios'
import BaseModal from '@/components/BaseModal.vue'
import draggable from 'vuedraggable'

const API_URL = 'http://localhost:3000/api'
const route = useRoute()
const router = useRouter()
const { getAccessTokenSilently } = useAuth0()

const quiz = ref({
  title: '',
  description: '',
  questions: [],
  isPublished: false
})

const bankQuestions = ref([])
const showQuestionSelector = ref(false)
const selectedQuestions = ref([])
const questionSearch = ref('')

const availableQuestions = computed(() => {
  const search = questionSearch.value.toLowerCase()
  const existingIds = new Set(quiz.value.questions.map(q => q._id))

  return bankQuestions.value
    .filter(q => !existingIds.has(q._id))
    .filter(q =>
      search === '' ||
      q.text.toLowerCase().includes(search) ||
      q.feedbackYes.toLowerCase().includes(search) ||
      q.feedbackNo.toLowerCase().includes(search)
    )
})

const loadQuiz = async () => {
  try {
    const token = await getAccessTokenSilently()
    const response = await axios.get(`${API_URL}/quizzes/${route.params.id}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    quiz.value = response.data
  } catch (error) {
    console.error('Error loading quiz:', error)
    router.push('/my-quizzes')
  }
}

const loadBankQuestions = async () => {
  try {
    const token = await getAccessTokenSilently()
    const response = await axios.get(`${API_URL}/questions/bank`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    bankQuestions.value = response.data
  } catch (error) {
    console.error('Error loading bank questions:', error)
  }
}

const publishQuiz = async () => {
  try {
    const token = await getAccessTokenSilently()
    await axios.patch(
      `${API_URL}/quizzes/${route.params.id}/publish`,
      { isPublished: true },
      {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }
    )
    await loadQuiz()
  } catch (error) {
    console.error('Error publishing quiz:', error)
  }
}

const unpublishQuiz = async () => {
  try {
    const token = await getAccessTokenSilently()
    await axios.patch(
      `${API_URL}/quizzes/${route.params.id}/publish`,
      { isPublished: false },
      {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }
    )
    await loadQuiz()
  } catch (error) {
    console.error('Error unpublishing quiz:', error)
  }
}

const handleReorder = async () => {
  try {
    const token = await getAccessTokenSilently()
    const orderedQuestions = quiz.value.questions.map(q => ({
      question: q.question?._id || q._id,
      order: quiz.value.questions.indexOf(q)
    }))

    await axios.put(
      `${API_URL}/quizzes/${route.params.id}`,
      { questions: orderedQuestions },
      {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }
    )
  } catch (error) {
    console.error('Error reordering questions:', error)
  }
}

const openQuestionSelector = () => {
  selectedQuestions.value = []
  showQuestionSelector.value = true
}

const closeQuestionSelector = () => {
  showQuestionSelector.value = false
  selectedQuestions.value = []
  questionSearch.value = ''
}

const addSelectedQuestions = async () => {
  try {
    const token = await getAccessTokenSilently()

    // Folosim direct selectedQuestions.value pentru ID-uri
    await axios.patch(
      `${API_URL}/quizzes/${route.params.id}/assign-questions`,
      { questionIds: selectedQuestions.value },
      {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }
    )
    await loadQuiz()
    closeQuestionSelector()
  } catch (error) {
    console.error('Error adding questions:', error)
    alert('Eroare la adƒÉugarea √ÆntrebƒÉrilor')
  }
}

const removeQuestion = async (questionItem) => {
  if (!confirm('E»ôti sigur cƒÉ vrei sƒÉ elimini aceastƒÉ √Æntrebare din quiz?')) {
    return
  }

  try {
    const token = await getAccessTokenSilently()

    // FiltrƒÉm √Æntrebarea din array-ul de √ÆntrebƒÉri
    const updatedQuestions = quiz.value.questions.filter(q => {
      const qId = q.question?._id || q._id
      const itemId = questionItem.question?._id || questionItem._id
      return qId !== itemId
    })

    // Facem update la quiz cu noua listƒÉ de √ÆntrebƒÉri
    await axios.put(
      `${API_URL}/quizzes/${route.params.id}`,
      { questions: updatedQuestions },
      {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }
    )

    // Re√ÆncƒÉrcƒÉm quiz-ul
    await loadQuiz()
  } catch (error) {
    console.error('Error removing question:', error)
    alert('Eroare la eliminarea √ÆntrebƒÉrii')
  }
}

onMounted(() => {
  loadQuiz()
  loadBankQuestions()
})
</script>

================
File: src/views/HomeView.vue
================
<template>
  <div class="max-w-7xl mx-auto px-4 py-12">
    <div class="text-center">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">
        Welcome to Quiz App
      </h1>
      <p class="text-lg text-gray-600 mb-8">
        Create and share your own quizzes or take quizzes created by others.
      </p>

      <div class="space-y-4">
        <template v-if="isAuthenticated">
          <router-link to="/admin"
            class="inline-block px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
            Go to Dashboard
          </router-link>
        </template>
        <template v-else>
          <button @click="login"
            class="px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
            Login to Create Quiz
          </button>
        </template>
      </div>
    </div>
  </div>
</template>

<script setup>
import { useAuth0 } from '@auth0/auth0-vue';

const { loginWithRedirect, isAuthenticated } = useAuth0();

const login = () => {
  loginWithRedirect({
    appState: { targetUrl: '/admin' }
  });
};
</script>

================
File: src/views/MyQuizzesView.vue
================
<template>
  <div class="min-h-screen bg-gray-50/50 dark:bg-dark-bg">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Stats Overview -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm p-6 border border-gray-100 dark:border-dark-border">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Quizuri</h3>
            <span class="p-2 bg-blue-50 dark:bg-blue-900/50 rounded-lg">
              <svg class="w-5 h-5 text-blue-500 dark:text-blue-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-gray-100">{{ sortedQuizzes.length }}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
            {{ publishedQuizzes.length }} publicate
          </p>
        </div>

        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm p-6 border border-gray-100 dark:border-dark-border">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Total CompletƒÉri</h3>
            <span class="p-2 bg-green-50 dark:bg-green-900/50 rounded-lg">
              <svg class="w-5 h-5 text-green-500 dark:text-green-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-gray-100">{{ totalCompletions }}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">√Æn total</p>
        </div>

        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm p-6 border border-gray-100 dark:border-dark-border">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Total √éntrebƒÉri</h3>
            <span class="p-2 bg-purple-50 dark:bg-purple-900/50 rounded-lg">
              <svg class="w-5 h-5 text-purple-500 dark:text-purple-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-gray-100">{{ totalQuestions }}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">√Æn toate quizurile</p>
        </div>
      </div>

      <!-- Header -->
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-100">Quizurile Mele</h1>
        <button @click="createNewQuiz"
          class="px-4 py-2 bg-primary hover:bg-primary/90 text-white rounded-lg transition-all flex items-center gap-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          Quiz Nou
        </button>
      </div>

      <!-- Quiz List -->
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div v-for="quiz in sortedQuizzes" :key="quiz._id"
          class="bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border hover:shadow-md transition-all duration-200">
          <div class="p-6">
            <div class="flex justify-between items-start mb-4">
              <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">{{ quiz.title }}</h2>
              <span
                :class="quiz.isPublished ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100'"
                class="px-2 py-1 text-xs rounded-full">
                {{ quiz.isPublished ? 'Publicat' : 'CiornƒÉ' }}
              </span>
            </div>

            <p class="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2 text-left">{{ quiz.description }}</p>

            <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-6">
              <div class="flex items-center">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907" />
                </svg>
                {{ quiz.questions.length }} √ÆntrebƒÉri
              </div>
              <div class="flex items-center">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {{ quiz.completions || 0 }} completƒÉri
              </div>
              <div class="flex items-center">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                {{ formatDate(quiz.createdAt) }}
              </div>
            </div>

            <div class="flex justify-between items-center">
              <div class="flex gap-2">
                <router-link :to="`/quiz/${quiz._id}/edit`"
                  class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium text-sm">
                  EditeazƒÉ
                </router-link>
                <button @click="confirmDelete(quiz)"
                  class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 font-medium text-sm">
                  »òterge
                </button>
              </div>

              <button v-if="quiz.isPublished" @click="copyQuizUrl(quiz._id)"
                class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Quiz Modal -->
    <BaseModal v-if="showCreateModal" @close="closeCreateModal">
      <template #header>
        <h3 class="text-lg font-medium dark:text-gray-100">Quiz Nou</h3>
      </template>

      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Titlu
          </label>
          <input v-model="newQuiz.title" type="text"
            class="w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-dark-card dark:text-gray-100 shadow-sm focus:border-primary focus:ring-primary" />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Descriere
          </label>
          <textarea v-model="newQuiz.description" rows="3"
            class="w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-dark-card dark:text-gray-100 shadow-sm focus:border-primary focus:ring-primary"></textarea>
        </div>
      </div>

      <template #footer>
        <div class="flex justify-end space-x-3">
          <button @click="closeCreateModal"
            class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">
            AnuleazƒÉ
          </button>
          <button @click="submitNewQuiz" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
            :disabled="!newQuiz.title">
            CreeazƒÉ
          </button>
        </div>
      </template>
    </BaseModal>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useAuth0 } from '@auth0/auth0-vue'
import { useRouter } from 'vue-router'
import BaseModal from '@/components/BaseModal.vue'
import axios from 'axios'

const API_URL = 'http://localhost:8080/api'
const router = useRouter()
const { getAccessTokenSilently } = useAuth0()

const quizzes = ref([])
const showCreateModal = ref(false)
const newQuiz = ref({
  title: '',
  description: ''
})

// SortƒÉm quizurile - publicate primele
const sortedQuizzes = computed(() => {
  return [...quizzes.value].sort((a, b) => {
    if (a.isPublished === b.isPublished) {
      return new Date(b.createdAt) - new Date(a.createdAt);
    }
    return b.isPublished - a.isPublished;
  });
});

const publishedQuizzes = computed(() =>
  quizzes.value.filter(q => q.isPublished)
)

const totalQuestions = computed(() =>
  quizzes.value.reduce((sum, quiz) => sum + quiz.questions.length, 0)
)

const totalCompletions = computed(() =>
  quizzes.value.reduce((sum, quiz) => sum + (quiz.completions || 0), 0)
)

const loadQuizzes = async () => {
  try {
    const token = await getAccessTokenSilently()
    const response = await axios.get(`${API_URL}/quizzes`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    quizzes.value = response.data
  } catch (error) {
    console.error('Error loading quizzes:', error)
  }
}

const createNewQuiz = () => {
  showCreateModal.value = true
}

const closeCreateModal = () => {
  showCreateModal.value = false
  newQuiz.value = {
    title: '',
    description: ''
  }
}

const submitNewQuiz = async () => {
  try {
    const token = await getAccessTokenSilently()
    const response = await axios.post(
      `${API_URL}/quizzes`,
      newQuiz.value,
      {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }
    )
    closeCreateModal()
    router.push(`/quiz/${response.data._id}/edit`)
  } catch (error) {
    console.error('Error creating quiz:', error)
    alert('Eroare la crearea quiz-ului')
  }
}

const confirmDelete = async (quiz) => {
  if (!confirm(`E»ôti sigur cƒÉ vrei sƒÉ »ôtergi quiz-ul "${quiz.title}"? AceastƒÉ ac»õiune nu poate fi anulatƒÉ.`)) {
    return;
  }

  try {
    const token = await getAccessTokenSilently();
    const response = await axios.delete(`${API_URL}/quizzes/${quiz._id}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    if (response.data.success) {
      // EliminƒÉm quiz-ul din lista localƒÉ
      quizzes.value = quizzes.value.filter(q => q._id !== quiz._id);
    } else {
      throw new Error('Failed to delete quiz');
    }
  } catch (error) {
    console.error('Error deleting quiz:', error);
    if (error.response?.status === 404) {
      alert('Quiz-ul nu a fost gƒÉsit.');
    } else {
      alert('A apƒÉrut o eroare la »ôtergerea quiz-ului.');
    }
  }
}

const copyQuizUrl = (quizId) => {
  const url = `${window.location.origin}/quiz/${quizId}`
  navigator.clipboard.writeText(url)
    .then(() => alert('Link copiat √Æn clipboard!'))
    .catch(err => console.error('Error copying to clipboard:', err))
}

const formatDate = (dateString) => {
  return new Date(dateString).toLocaleDateString('ro-RO', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  })
}

// Ini»õializare
onMounted(() => {
  loadQuizzes()
})
</script>

<style scoped>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>

================
File: src/views/ProfileView.vue
================
<template>
  <div class="min-h-screen bg-gray-50/50">
    <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Profile Header Card -->
      <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-6">
        <div class="flex items-center gap-6">
          <div class="bg-primary/10 w-24 h-24 rounded-full flex items-center justify-center">
            <span class="text-3xl font-bold text-primary">
              {{ userInitials }}
            </span>
          </div>

          <div class="flex-1">
            <div class="flex justify-between items-start">
              <div>
                <h1 class="text-2xl font-bold text-gray-900">{{ userProfile.name }}</h1>
                <p class="text-gray-500">{{ user?.email }}</p>
              </div>
              <button @click="isEditing = true" class="text-primary hover:text-primary/90 font-medium"
                v-if="!isEditing">
                EditeazƒÉ Profil
              </button>
            </div>
          </div>
        </div>
      </div>
      <!-- Profile Stats -->
      <div class="grid grid-cols-3 gap-6 mb-6">
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
          <div class="text-sm font-medium text-gray-500 mb-1">Quizuri Create</div>
          <div class="text-2xl font-semibold text-gray-900">{{ stats.totalQuizzes }}</div>
        </div>
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
          <div class="text-sm font-medium text-gray-500 mb-1">CompletƒÉri Total</div>
          <div class="text-2xl font-semibold text-gray-900">{{ stats.totalCompletions }}</div>
        </div>
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
          <div class="text-sm font-medium text-gray-500 mb-1">√éntrebƒÉri Create</div>
          <div class="text-2xl font-semibold text-gray-900">{{ stats.totalQuestions }}</div>
        </div>
      </div>



      <!-- Profile Settings -->
      <div class="bg-white rounded-xl shadow-sm border border-gray-100">
        <div class="p-6">
          <h2 class="text-lg font-medium text-gray-900 mb-6">SetƒÉri Profil</h2>

          <div class="space-y-6">
            <!-- Username -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">
                Nume Display
              </label>
              <input v-model="userProfile.name" type="text" :disabled="!isEditing"
                class="w-full rounded-lg border-gray-300 focus:border-primary focus:ring-primary disabled:bg-gray-50" />
            </div>

            <!-- Email Notifications -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-3">
                NotificƒÉri Email
              </label>
              <div class="space-y-3">
                <label class="flex items-center">
                  <input type="checkbox" v-model="userProfile.emailPreferences.quizCompleted" :disabled="!isEditing"
                    class="rounded border-gray-300 text-primary focus:ring-primary" />
                  <span class="ml-2 text-gray-700">C√¢nd cineva completeazƒÉ un quiz</span>
                </label>
                <label class="flex items-center">
                  <input type="checkbox" v-model="userProfile.emailPreferences.weeklyStats" :disabled="!isEditing"
                    class="rounded border-gray-300 text-primary focus:ring-primary" />
                  <span class="ml-2 text-gray-700">Statistici sƒÉptƒÉm√¢nale</span>
                </label>
              </div>
            </div>


            <!-- Theme Preference -->
            <div class="flex justify-end gap-3 pt-4" v-if="isEditing">
              <button @click="cancelEdit"
                class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                AnuleazƒÉ
              </button>
              <button @click="saveProfile"
                class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
                SalveazƒÉ ModificƒÉrile
              </button>
            </div>>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useAuth0 } from '@auth0/auth0-vue'
import axios from 'axios'
import { computed } from "vue";

const API_URL = 'http://localhost:3000/api'
const { getAccessTokenSilently, user } = useAuth0()

const isEditing = ref(false)
const stats = ref({
  totalQuizzes: 0,
  totalCompletions: 0,
  totalQuestions: 0
})

const userProfile = ref({
  name: '',
  emailPreferences: {
    quizCompleted: true,
    weeklyStats: false
  },
  theme: 'system'
})

// Compute user initials from name
const userInitials = computed(() => {
  const name = userProfile.value.name || ''
  return name
    .split(' ')
    .map(word => word[0])
    .join('')
    .toUpperCase()
    .substring(0, 2)
})

const loadProfile = async () => {
  try {
    const token = await getAccessTokenSilently()
    const response = await axios.get(`${API_URL}/profile`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })

    userProfile.value = {
      ...userProfile.value,
      ...response.data
    }
    stats.value = response.data.stats
  } catch (error) {
    console.error('Error loading profile:', error)
  }
}

const saveProfile = async () => {
  try {
    const token = await getAccessTokenSilently()
    await axios.put(
      `${API_URL}/profile`,
      userProfile.value,
      {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }
    )

    isEditing.value = false
    alert('Profilul a fost actualizat cu succes!')
  } catch (error) {
    console.error('Error saving profile:', error)
    alert('Eroare la salvarea profilului')
  }
}

const cancelEdit = () => {
  isEditing.value = false
  loadProfile() // Re√ÆncarcƒÉ datele originale
}

onMounted(() => {
  if (user.value) {
    userProfile.value.name = user.value.name
  }
  loadProfile()
})
</script>

================
File: src/views/QuestionBankView.vue
================
<template>
  <div class="min-h-screen bg-gray-50/50 dark:bg-dark-bg transition-colors">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Stats Overview -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Total √éntrebƒÉri</h3>
            <span class="p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
              <svg class="w-5 h-5 text-blue-500 dark:text-blue-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-white">{{ questions.length }}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
            √Æn bancƒÉ
          </p>
        </div>

        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">√éntrebƒÉri Folosite</h3>
            <span class="p-2 bg-green-50 dark:bg-green-900/20 rounded-lg">
              <svg class="w-5 h-5 text-green-500 dark:text-green-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-white">{{ usedQuestions }}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
            √Æn quizuri
          </p>
        </div>

        <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">Categorii</h3>
            <span class="p-2 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
              <svg class="w-5 h-5 text-purple-500 dark:text-purple-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
            </span>
          </div>
          <p class="text-2xl font-semibold text-gray-900 dark:text-white">{{ uniqueCategories }}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
            distincte
          </p>
        </div>
      </div>
      <!-- Header & Search -->
      <div
        class="bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border p-6 mb-6">
        <div class="flex flex-col md:flex-row md:items-center gap-4">
          <div class="flex-1">
            <input v-model="filters.search" type="text" placeholder="CautƒÉ √ÆntrebƒÉri..."
              class="w-full px-4 py-2 bg-white dark:bg-dark-bg border border-gray-300 dark:border-dark-border rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:text-white" />
          </div>
          <div class="flex gap-4">
            <select v-model="filters.category"
              class="px-4 py-2 bg-white dark:bg-dark-bg border border-gray-300 dark:border-dark-border rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:text-white">
              <option value="">Toate categoriile</option>
              <option v-for="cat in categories" :key="cat" :value="cat">
                {{ cat }}
              </option>
            </select>
            <button @click="openAddModal"
              class="px-4 py-2 bg-primary hover:bg-primary/90 text-black rounded-lg transition-colors flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
              </svg>
              AdaugƒÉ √éntrebare
            </button>
          </div>
        </div>
      </div>

      <!-- Questions List -->
      <div class="bg-white dark:bg-dark-card rounded-xl shadow-sm border border-gray-100 dark:border-dark-border">
        <div v-if="isLoading" class="p-8 text-center">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
          <p class="mt-4 text-gray-500 dark:text-gray-400">Se √ÆncarcƒÉ √ÆntrebƒÉrile...</p>
        </div>

        <div v-else-if="filteredQuestions.length === 0" class="p-8 text-center">
          <p class="text-gray-500 dark:text-gray-400">Nu existƒÉ √ÆntrebƒÉri care sƒÉ corespundƒÉ filtrelor.</p>
        </div>

        <div v-else class="divide-y divide-gray-100 dark:divide-dark-border">
          <div v-for="question in filteredQuestions" :key="question._id"
            class="p-6 hover:bg-gray-50 dark:hover:bg-dark-bg/50 transition-colors">
            <div class="flex justify-between items-start">
              <div class="flex-1">
                <h3 class="font-medium text-gray-900 dark:text-white text-left">{{ question.text }}</h3>

                <div class="mt-2 space-y-1 text-sm text-gray-600 dark:text-gray-300">
                  <p class="text-left">
                    <span
                      class="px-2 inline-block py-1 bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-400 rounded-md mr-2">
                      Feedback Da
                    </span>
                    {{ question.feedbackYes }}
                  </p>
                  <p class="text-left">
                    <span
                      class="px-2 inline-block py-1 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-md mr-2">
                      Feedback Nu
                    </span>
                    {{ question.feedbackNo }}
                  </p>
                </div>

                <!-- Usage & Categories -->
                <div class="mt-4 flex flex-wrap items-center gap-4">
                  <div class="flex items-center text-sm">
                    <span class="font-medium mr-2 text-gray-500 dark:text-gray-400">FolositƒÉ √Æn:</span>
                    <div v-if="question.usedInQuizzes?.length" class="flex gap-2">
                      <span v-for="quiz in question.usedInQuizzes" :key="quiz._id"
                        class="px-2 py-1 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400 rounded-md">
                        {{ quiz.title }}
                      </span>
                    </div>
                    <span v-else class="text-gray-500 dark:text-gray-400">NefolositƒÉ</span>
                  </div>

                  <div v-if="question.category" class="text-sm">
                    <span class="px-2 py-1 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 rounded-md">
                      {{ question.category }}
                    </span>
                  </div>
                </div>
              </div>

              <div class="flex items-center gap-2">
                <button @click="editQuestion(question)"
                  class="p-2 text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                  </svg>
                </button>
                <button @click="confirmDelete(question)"
                  class="p-2 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                  :disabled="question.usedInQuizzes?.length > 0">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Question Modal -->
    <BaseModal v-if="showModal" @close="closeModal">
      <template #header>
        <h3 class="text-lg font-medium">
          {{ editingQuestion ? 'EditeazƒÉ √éntrebarea' : 'AdaugƒÉ √éntrebare NouƒÉ' }}
        </h3>
      </template>

      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">
            √éntrebare
          </label>
          <input v-model="currentQuestion.text" type="text"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary" />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">
            Feedback pentru Da
          </label>
          <textarea v-model="currentQuestion.feedbackYes" rows="3"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"></textarea>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">
            Feedback pentru Nu
          </label>
          <textarea v-model="currentQuestion.feedbackNo" rows="3"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"></textarea>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">
            Categorie
          </label>
          <input v-model="currentQuestion.category" type="text"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary" />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">
            Tags (separate prin virgulƒÉ)
          </label>
          <input v-model="tagsInput" type="text"
            class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary" />
        </div>
      </div>

      <template #footer>
        <div class="flex justify-end space-x-3">
          <button @click="closeModal"
            class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
            AnuleazƒÉ
          </button>
          <button @click="saveQuestion" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
            :disabled="!isValidQuestion">
            {{ editingQuestion ? 'SalveazƒÉ' : 'AdaugƒÉ' }}
          </button>
        </div>
      </template>
    </BaseModal>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useAuth0 } from '@auth0/auth0-vue'
import axios from 'axios'
import BaseModal from '@/components/BaseModal.vue'

const API_URL = 'http://localhost:3000/api'
const { getAccessTokenSilently } = useAuth0()

// State
const questions = ref([])
const isLoading = ref(true)
const showModal = ref(false)
const editingQuestion = ref(null)
const currentQuestion = ref({
  text: '',
  feedbackYes: '',
  feedbackNo: '',
  category: '',
  tags: []
})

const filters = ref({
  search: '',
  category: '',
  usage: 'all'
})


// Computed
const categories = computed(() => {
  const cats = new Set(questions.value.map(q => q.category).filter(Boolean))
  return Array.from(cats).sort()
})

const uniqueCategories = computed(() => categories.value.length)

const usedQuestions = computed(() =>
  questions.value.filter(q => q.usedInQuizzes?.length > 0).length
)

const filteredQuestions = computed(() => {
  return questions.value.filter(q => {
    // Search filter
    if (filters.value.search) {
      const searchTerm = filters.value.search.toLowerCase()
      const matchesSearch =
        q.text.toLowerCase().includes(searchTerm) ||
        q.feedbackYes.toLowerCase().includes(searchTerm) ||
        q.feedbackNo.toLowerCase().includes(searchTerm)

      if (!matchesSearch) return false
    }

    // Category filter
    if (filters.value.category && q.category !== filters.value.category) {
      return false
    }

    return true
  })
})

const isValidQuestion = computed(() => {
  return currentQuestion.value.text?.trim() &&
    currentQuestion.value.feedbackYes?.trim() &&
    currentQuestion.value.feedbackNo?.trim()
})

// Methods
const loadQuestions = async () => {
  try {
    const token = await getAccessTokenSilently()
    const response = await axios.get(`${API_URL}/questions/bank`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    questions.value = response.data
  } catch (error) {
    console.error('Error loading questions:', error)
  } finally {
    isLoading.value = false
  }
}

const openAddModal = () => {
  editingQuestion.value = null
  currentQuestion.value = {
    text: '',
    feedbackYes: '',
    feedbackNo: '',
    category: '',
    tags: []
  }
  showModal.value = true
}

const editQuestion = (question) => {
  editingQuestion.value = question._id
  currentQuestion.value = { ...question }
  showModal.value = true
}

const closeModal = () => {
  showModal.value = false
  editingQuestion.value = null
  currentQuestion.value = {
    text: '',
    feedbackYes: '',
    feedbackNo: '',
    category: '',
    tags: []
  }
}

const saveQuestion = async () => {
  try {
    const token = await getAccessTokenSilently()

    if (editingQuestion.value) {
      await axios.put(
        `${API_URL}/questions/bank/${editingQuestion.value}`,
        currentQuestion.value,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      )
    } else {
      await axios.post(
        `${API_URL}/questions/bank`,
        currentQuestion.value,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      )
    }

    await loadQuestions()
    closeModal()
  } catch (error) {
    console.error('Error saving question:', error)
    alert('Eroare la salvarea √ÆntrebƒÉrii')
  }
}

const confirmDelete = async (question) => {
  if (question.usedInQuizzes?.length > 0) {
    alert('Nu po»õi »ôterge o √Æntrebare care este folositƒÉ √Æn quizuri.')
    return
  }

  if (!confirm('E»ôti sigur cƒÉ vrei sƒÉ »ôtergi aceastƒÉ √Æntrebare?')) {
    return
  }

  try {
    const token = await getAccessTokenSilently()
    await axios.delete(`${API_URL}/questions/bank/${question._id}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    await loadQuestions()
  } catch (error) {
    console.error('Error deleting question:', error)
    alert('Eroare la »ôtergerea √ÆntrebƒÉrii')
  }
}

onMounted(loadQuestions)
</script>

================
File: src/views/QuestionsView.vue
================
<!-- src/views/AdminDashboard.vue -->
<template>
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4">
      <!-- Header -->
      <div class="flex justify-between items-center mb-8">
        <h1 class="text-2xl font-bold text-gray-900">
          Administrare √éntrebƒÉri
        </h1>
        <button @click="openAddModal()"
          class="bg-primary hover:bg-primary/90 text-white px-4 py-2 rounded-lg transition-all">
          AdaugƒÉ √éntrebare
        </button>
      </div>

      <!-- Loading state -->
      <div v-if="isLoading" class="flex justify-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>

      <!-- Lista √ÆntrebƒÉri -->
      <div v-else-if="questions.length > 0" class="bg-white shadow rounded-lg">
        <div class="p-6 space-y-4">
          <div v-for="question in questions" :key="question._id"
            class="border rounded-lg p-4 hover:shadow-md transition-all">

            <div class="flex justify-between items-start">
              <div class="flex-1">
                <h3 class="font-medium text-left text-lg mb-2">{{ question.text }}</h3>
                <div class="space-y-2 text-sm text-gray-600">
                  <p><span class="font-medium">Feedback Da:</span> {{ question.feedbackYes }}</p>
                  <p><span class="font-medium">Feedback Nu:</span> {{ question.feedbackNo }}</p>
                </div>
              </div>
              <div class="flex space-x-2 ml-4">
                <button @click="openEditModal(question)"
                  class="text-blue-600 hover:text-blue-800 px-3 py-1 rounded-md hover:bg-blue-50 transition-all">
                  <span class="text-sm">EditeazƒÉ</span>
                </button>
                <button @click="confirmDelete(question)"
                  class="text-red-600 hover:text-red-800 px-3 py-1 rounded-md hover:bg-red-50 transition-all">
                  <span class="text-sm">»òterge</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- No questions state -->
      <div v-else class="text-center py-12 bg-white shadow rounded-lg">
        <p class="text-gray-600">Nu existƒÉ √ÆntrebƒÉri √ÆncƒÉ. √éncepe prin a adƒÉuga una!</p>
      </div>

      <BaseModal v-if="showModal" @close="closeModal">
        <template #header>
          <h3 class="text-lg font-medium">
            {{ editingQuestion ? 'EditeazƒÉ √éntrebarea' : 'AdaugƒÉ √éntrebare NouƒÉ' }}
          </h3>
        </template>

        <!-- Con»õinutul modalului vine aici -->
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              √éntrebare
            </label>
            <input v-model="currentQuestion.text" type="text"
              class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
              placeholder="Introdu √Æntrebarea..." />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              Feedback pentru Da
            </label>
            <textarea v-model="currentQuestion.feedbackYes" rows="3"
              class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
              placeholder="Feedback pentru rƒÉspuns pozitiv..."></textarea>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              Feedback pentru Nu
            </label>
            <textarea v-model="currentQuestion.feedbackNo" rows="3"
              class="w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
              placeholder="Feedback pentru rƒÉspuns negativ..."></textarea>
          </div>
        </div>

        <template #footer>
          <div class="flex justify-end space-x-3">
            <button @click="closeModal"
              class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
              AnuleazƒÉ
            </button>
            <button @click="saveQuestion" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
              :disabled="isLoading">
              {{ isLoading ? 'Se salveazƒÉ...' : (editingQuestion ? 'SalveazƒÉ' : 'AdaugƒÉ') }}
            </button>
          </div>
        </template>
      </BaseModal>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useAuth0 } from '@auth0/auth0-vue'
import axios from 'axios'
import BaseModal from '@/components/BaseModal.vue'

const API_URL = 'http://localhost:3000/api'
const { getAccessTokenSilently } = useAuth0()

const questions = ref([])
const showModal = ref(false)
const currentQuestion = ref({
  text: '',
  feedbackYes: '',
  feedbackNo: ''
})
const editingQuestion = ref(null)
const isLoading = ref(false)

const getAuthHeaders = async () => {
  const token = await getAccessTokenSilently()
  return {
    headers: {
      Authorization: `Bearer ${token}`
    }
  }
}

const loadQuestions = async () => {
  isLoading.value = true;
  try {
    const config = await getAuthHeaders();
    console.log('Requesting questions...');

    const response = await axios.get(`${API_URL}/questions`, config);
    console.log('Response received:', response.data);

    questions.value = response.data;
    console.log('Questions set to:', questions.value);
  } catch (error) {
    console.error('Error loading questions:', error);
  } finally {
    isLoading.value = false;
  }
};

const openAddModal = () => {
  editingQuestion.value = null
  // AsigurƒÉ-te cƒÉ toate c√¢mpurile sunt ini»õializate
  currentQuestion.value = {
    text: '',
    feedbackYes: '',
    feedbackNo: ''
  }
  showModal.value = true
}

const openEditModal = (question) => {
  editingQuestion.value = question._id
  currentQuestion.value = { ...question }
  showModal.value = true
}

const closeModal = () => {
  showModal.value = false
  editingQuestion.value = null
  currentQuestion.value = {
    text: '',
    feedbackYes: '',
    feedbackNo: ''
  }
}

const saveQuestion = async () => {
  isLoading.value = true
  try {
    // Validare pe frontend
    if (!currentQuestion.value.text?.trim()) {
      throw new Error('√éntrebarea este obligatorie')
    }
    if (!currentQuestion.value.feedbackYes?.trim()) {
      throw new Error('Feedback-ul pentru DA este obligatoriu')
    }
    if (!currentQuestion.value.feedbackNo?.trim()) {
      throw new Error('Feedback-ul pentru NU este obligatoriu')
    }

    const questionData = {
      text: currentQuestion.value.text.trim(),
      feedbackYes: currentQuestion.value.feedbackYes.trim(),
      feedbackNo: currentQuestion.value.feedbackNo.trim()
    }

    console.log('Sending question data:', questionData)

    const config = await getAuthHeaders()
    config.headers['Content-Type'] = 'application/json'

    if (editingQuestion.value) {
      const response = await axios.put(
        `${API_URL}/questions/${editingQuestion.value}`,
        questionData,
        config
      )
      console.log('Update response:', response.data)
    } else {
      const response = await axios.post(
        `${API_URL}/questions`,
        questionData,
        config
      )
      console.log('Create response:', response.data)
    }

    await loadQuestions()
    closeModal()
  } catch (error) {
    console.error('Error details:', error)
    console.error('Response data:', error.response?.data)
    alert(error.response?.data?.error || error.message || 'Eroare la salvarea √ÆntrebƒÉrii')
  } finally {
    isLoading.value = false
  }
}

const confirmDelete = async (question) => {
  if (confirm('E»ôti sigur cƒÉ vrei sƒÉ »ôtergi aceastƒÉ √Æntrebare?')) {
    try {
      const config = await getAuthHeaders()
      await axios.delete(`${API_URL}/questions/${question._id}`, config)
      await loadQuestions()
    } catch (error) {
      console.error('Error deleting question:', error)
      alert('Eroare la »ôtergerea √ÆntrebƒÉrii')
    }
  }
}

onMounted(loadQuestions)
</script>

================
File: src/views/QuizPage.vue
================
<script setup>
import { ref, computed } from 'vue'
import { useRoute } from 'vue-router'
import axios from 'axios'

const API_URL = 'http://localhost:8080/api'
const route = useRoute()

// State
const quiz = ref(null)
const questions = ref([])
const currentQuestionIndex = ref(0)
const answers = ref({})
const email = ref('')
const emailError = ref(false)
const isLoading = ref(true)
const error = ref(null)

// Computed
const isCompleted = computed(() =>
  questions.value.length > 0 && currentQuestionIndex.value >= questions.value.length
)

const currentQuestion = computed(() =>
  questions.value[currentQuestionIndex.value]
)

const isValidEmail = computed(() => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email.value)
})

// Methods
const loadQuiz = async () => {
  try {
    const response = await axios.get(`${API_URL}/quiz/${route.params.id}`)
    quiz.value = response.data
    questions.value = response.data.questions
  } catch (error) {
    console.error('Error loading quiz:', error)
    error.value = error.response?.data?.error || 'Eroare la √ÆncƒÉrcarea quiz-ului'
  } finally {
    isLoading.value = false
  }
}

const answerQuestion = (answer) => {
  if (currentQuestion.value) {
    answers.value[currentQuestion.value._id] = answer
    currentQuestionIndex.value++
  }
}

const submitResults = async () => {
  if (!isValidEmail.value) {
    emailError.value = true;
    return;
  }

  try {
    // Trimitem datele ca JSON, nu ca FormData
    const response = await axios.post(`${API_URL}/quiz/submit`, {
      quizId: quiz.value._id,
      email: email.value,
      answers: answers.value
    }, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.data.success) {
      alert('Rezultatele au fost trimise pe email!');
    } else {
      throw new Error('Eroare la trimiterea rezultatelor');
    }
  } catch (error) {
    console.error('Error submitting results:', error);
    alert('A apƒÉrut o eroare la trimiterea rezultatelor');
  }
}

// Load quiz when component is mounted
loadQuiz()
</script>

<template>
  <div class="min-h-screen bg-gray-50/50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Loading state -->
      <div v-if="isLoading" class="text-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
        <p class="mt-4 text-gray-500">Se √ÆncarcƒÉ quiz-ul...</p>
      </div>

      <!-- Error state -->
      <div v-else-if="error" class="text-center py-12">
        <div class="bg-red-50 text-red-600 p-4 rounded-lg inline-block">
          {{ error }}
        </div>
      </div>

      <!-- Quiz content -->
      <div v-else-if="quiz" class="bg-white rounded-xl shadow-sm border border-gray-100 p-8">
        <h1 class="text-2xl font-bold text-gray-900 mb-2">{{ quiz.title }}</h1>
        <p class="text-gray-600 mb-8">{{ quiz.description }}</p>

        <div v-if="!isCompleted" class="space-y-8">
          <!-- Current question -->
          <div class="bg-gray-50 rounded-lg p-6">
            <h2 class="text-xl font-medium text-gray-900 mb-6">
              {{ currentQuestion.text }}
            </h2>

            <div class="flex gap-4 justify-center">
              <button @click="answerQuestion(true)"
                class="px-6 py-3 bg-primary hover:bg-primary/90 text-white rounded-lg transition-all">
                Da
              </button>
              <button @click="answerQuestion(false)"
                class="px-6 py-3 bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 rounded-lg transition-all">
                Nu
              </button>
            </div>

            <!-- Progress bar -->
            <div class="mt-8">
              <div class="flex justify-between text-sm text-gray-600 mb-2">
                <span>Progres</span>
                <span>{{ currentQuestionIndex + 1 }}/{{ questions.length }}</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-primary h-2 rounded-full transition-all duration-300"
                  :style="{ width: `${(currentQuestionIndex / questions.length) * 100}%` }"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Completion state -->
        <div v-else class="text-center">
          <div class="mb-8">
            <div class="inline-flex items-center justify-center w-16 h-16 bg-primary/20 rounded-full mb-4">
              <svg class="w-8 h-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">
              FelicitƒÉri! Ai finalizat quiz-ul
            </h2>
            <p class="text-gray-600">
              Introdu adresa ta de email pentru a primi rezultatele.
            </p>
          </div>

          <div class="max-w-md mx-auto">
            <input v-model="email" type="email" placeholder="Email"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary mb-4"
              :class="{ 'border-red-300': emailError }" />
            <button @click="submitResults"
              class="w-full px-6 py-3 bg-primary hover:bg-primary/90 text-white rounded-lg transition-all"
              :disabled="!isValidEmail">
              Trimite Rezultatele
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./index.html", "./src/**/*.{vue,js,ts,jsx,tsx}"],
  theme: {
    extend: {
      colors: {
        primary: "#3C73A8",
        secondary: "#6366f1",
        "flat-blue": "#3C73A8",
        dark: {
          bg: "#111827",
          card: "#1F2937",
          text: "#F9FAFB",
          border: "#374151",
        },
      },
    },
  },
  plugins: [],
};

================
File: vue.config.js
================
const { defineConfig } = require("@vue/cli-service");
module.exports = defineConfig({
  transpileDependencies: true,
  devServer: {
    proxy: {
      "/api": {
        target: "http://localhost:3000",
        changeOrigin: true,
      },
    },
  },
});
